name: Deploy NuroPadel to VM
on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1

    - name: Start VM Instance if Stopped
      run: |
        echo "Checking VM instance status..."
        STATUS=$(gcloud compute instances describe padel-ai --zone=australia-southeast1-a --project=surf-coach --format="value(status)" 2>/dev/null || echo "ERROR")
        echo "Current VM status: $STATUS"
        if [ "$STATUS" = "TERMINATED" ] || [ "$STATUS" = "STOPPED" ]; then
          echo "VM is stopped. Starting instance..."
          gcloud compute instances start padel-ai --zone=australia-southeast1-a --project=surf-coach
          echo "Waiting for VM to boot..."
          sleep 90
          echo "Testing SSH connection..."
          for i in {1..20}; do
            if timeout 15 gcloud compute ssh padel-ai --zone=australia-southeast1-a --project=surf-coach --command="echo 'SSH Ready'" --ssh-flag="-o ConnectTimeout=10" --ssh-flag="-o StrictHostKeyChecking=no" 2>/dev/null; then
              echo "SSH connection ready!"
              break
            fi
            echo "SSH attempt $i/20..."
            sleep 15
          done
        elif [ "$STATUS" = "RUNNING" ]; then
          echo "VM is already running"
        else
          echo "Unknown VM status: $STATUS, attempting to start..."
          gcloud compute instances start padel-ai --zone=australia-southeast1-a --project=surf-coach || true
          sleep 60
        fi

    - name: Prepare VM for Deployment
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.VM_HOST }}
        username: Towers
        key: ${{ secrets.VM_SSH_KEY }}
        timeout: 120s
        command_timeout: 120s
        script: |
          set -e
          echo "Stopping existing services..."
          # Stop all current services (including combined-service)
          sudo systemctl stop padel-api combined-service yolo11-service yolov8-service mmpose-service yolo-nas-service 2>/dev/null || true
          echo "Creating base directories..."
          sudo mkdir -p /opt/padel/{app,shared,yolo,mmpose,yolo-nas}
          sudo mkdir -p /opt/padel/app/{configs/body_2d_keypoint/rtmpose/coco,weights,scripts,uploads,processed}
          sudo chown -R Towers:Towers /opt/padel
          echo "Preserving model weights..."
          if [ -d "/opt/padel/app/weights" ]; then
            cp -r /opt/padel/app/weights /tmp/weights_backup
            echo "Model weights backed up"
          fi
          echo "Cleaning old code..."
          find /opt/padel/app -maxdepth 1 -type f -delete
          find /opt/padel/app -maxdepth 1 -type d ! -name weights ! -name uploads ! -name processed -exec rm -rf {} + 2>/dev/null || true
          echo "VM prepared for code transfer"

    - name: Smart Code Update
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.VM_HOST }}
        username: Towers
        key: ${{ secrets.VM_SSH_KEY }}
        timeout: 180s
        command_timeout: 180s
        script: |
          set -e
          echo "ðŸ“‹ Checking if requirements changed..."
          cd /opt/padel
          curl -sL https://github.com/stevetowers098/nuro-padel/archive/refs/heads/main.tar.gz | tar -xz
          REBUILD_VENVS=false
          if [ ! -f "requirements.txt" ] || ! diff -q nuro-padel-main/requirements.txt requirements.txt >/dev/null 2>&1; then
            echo "ðŸ”„ Main requirements changed - need to rebuild shared venv"
            REBUILD_VENVS=true
          fi
          if [ ! -d "requirements" ] || ! diff -q -r nuro-padel-main/requirements/ requirements/ >/dev/null 2>&1; then
            echo "ðŸ”„ Service requirements changed - need to rebuild service venvs"
            REBUILD_VENVS=true
          fi
          echo "

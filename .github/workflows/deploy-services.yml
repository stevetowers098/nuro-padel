name: Smart Service Deployment
on:
  push:
    branches: [docker-containers, main]

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/stevetowers098/nuro-padel

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      yolo8: ${{ steps.changes.outputs.yolo8 }}
      yolo11: ${{ steps.changes.outputs.yolo11 }}
      mmpose: ${{ steps.changes.outputs.mmpose }}
      yolo-nas: ${{ steps.changes.outputs.yolo-nas }}
      vitpose: ${{ steps.changes.outputs.vitpose }}
      rf-detr: ${{ steps.changes.outputs.rf-detr }}
      nginx: ${{ steps.changes.outputs.nginx }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v3
        
      - name: 🔍 Detect changed services
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            yolo8:
              - 'services/yolo8/**'
            yolo11:
              - 'services/yolo11/**'
            mmpose:
              - 'services/mmpose/**'
            yolo-nas:
              - 'services/yolo-nas/**'
            vitpose:
              - 'services/vitpose/**'
            rf-detr:
              - 'services/rf-detr/**'
            nginx:
              - 'deployment/nginx.conf'
              - 'deployment/docker-compose.yml'
      
      - name: 📊 Log detected changes
        run: |
          echo "🔍 **CHANGE DETECTION RESULTS**"
          echo "================================="
          echo "YOLO8: ${{ steps.changes.outputs.yolo8 }}"
          echo "YOLO11: ${{ steps.changes.outputs.yolo11 }}"
          echo "MMPose: ${{ steps.changes.outputs.mmpose }}"
          echo "YOLO-NAS: ${{ steps.changes.outputs.yolo-nas }}"
          echo "ViTPose: ${{ steps.changes.outputs.vitpose }}"
          echo "RF-DETR: ${{ steps.changes.outputs.rf-detr }}"
          echo "Nginx: ${{ steps.changes.outputs.nginx }}"
          echo "================================="

  deploy-yolo8:
    needs: detect-changes
    if: needs.detect-changes.outputs.yolo8 == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v3
      
      - name: 🔍 Verify YOLO8 model requirements
        run: |
          echo "🔍 **YOLO8 MODEL WEIGHT VERIFICATION**"
          echo "================================="
          echo "📂 Checking Dockerfile for weight requirements..."
          
          if [ -f "services/yolo8/Dockerfile" ]; then
            echo "✅ Dockerfile found"
            
            # Check if Dockerfile expects weights in specific paths
            if grep -q "/app/weights" services/yolo8/Dockerfile; then
              echo "⚠️  Dockerfile expects weights in /app/weights/"
              echo "📝 Service uses local file loading (no auto-download)"
              echo "✅ Service has fallback mode for missing weights"
            else
              echo "ℹ️  No explicit weight paths found in Dockerfile"
            fi
            
            # Check main.py for weight loading logic
            if grep -q "model_info.*fallback" services/yolo8/main.py; then
              echo "✅ Service has fallback mode implemented"
            fi
            
            echo "✅ YOLO8 weight verification complete"
          else
            echo "❌ Dockerfile not found in services/yolo8/"
            exit 1
          fi
      
      - name: ⚙️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 🔐 Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 📦 Build and push YOLO8 image
        uses: docker/build-push-action@v5
        with:
          context: services/yolo8
          push: true
          tags: ${{ env.IMAGE_PREFIX }}/yolo8:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
        continue-on-error: false
        
      - name: 📊 Build success notification
        if: success()
        run: |
          echo "✅ **YOLO8 BUILD SUCCESSFUL**"
          echo "================================="
          echo "📦 Image: ${{ env.IMAGE_PREFIX }}/yolo8:latest"
          echo "🏷️ Registry: ${{ env.REGISTRY }}"
          echo "🔗 Image URL: https://github.com/stevetowers098/nuro-padel/pkgs/container/nuro-padel%2Fyolo8"
          echo "🚀 Ready for deployment"
      
      - name: ❌ Build failure notification
        if: failure()
        run: |
          echo "❌ **YOLO8 BUILD FAILED**"
          echo "================================="
          echo "🚨 Build process encountered errors"
          echo "📝 Check the build logs above for details"
          echo "🔧 Common fixes:"
          echo "   - Check Dockerfile syntax in services/yolo8/"
          echo "   - Verify base image availability"
          echo "   - Check for dependency conflicts"
          echo "   - Ensure model weights are accessible or fallback mode works"
          exit 1
      
      - name: 🚀 Deploy YOLO8 to VM - Start
        run: |
          echo "🚀 **YOLO8 DEPLOYMENT START**"
          echo "================================="
          echo "✅ Built and pushed: ${{ env.IMAGE_PREFIX }}/yolo8:latest"

      - name: 🔌 SSH Deploy YOLO8
        run: ssh padel-ai "cd /opt/padel-docker && docker-compose pull yolo8 && docker-compose up -d yolo8"

      - name: ✅ YOLO8 Deployment Completed
        run: echo "✅ **YOLO8 DEPLOYMENT COMPLETED**"

  deploy-yolo11:
    needs: detect-changes
    if: needs.detect-changes.outputs.yolo11 == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v3
      
      - name: 🔍 Verify YOLO11 model requirements
        run: |
          echo "🔍 **YOLO11 MODEL WEIGHT VERIFICATION**"
          echo "================================="
          echo "📂 Checking Dockerfile for weight requirements..."
          
          if [ -f "services/yolo11/Dockerfile" ]; then
            echo "✅ Dockerfile found"
            if grep -q "/app/weights" services/yolo11/Dockerfile; then
              echo "⚠️  Dockerfile expects weights in /app/weights/"
              echo "📝 Service uses local file loading (no auto-download)"
              echo "✅ Service has fallback mode for missing weights"
            fi
            if grep -q "model_info.*fallback" services/yolo11/main.py; then
              echo "✅ Service has fallback mode implemented"
            fi
            echo "✅ YOLO11 weight verification complete"
          else
            echo "❌ Dockerfile not found in services/yolo11/"
            exit 1
          fi
      
      - name: ⚙️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 🔐 Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 📦 Build and push YOLO11 image
        uses: docker/build-push-action@v5
        with:
          context: services/yolo11
          push: true
          tags: ${{ env.IMAGE_PREFIX }}/yolo11:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
        continue-on-error: false
        
      - name: 📊 Build success notification
        if: success()
        run: |
          echo "✅ **YOLO11 BUILD SUCCESSFUL**"
          echo "================================="
          echo "📦 Image: ${{ env.IMAGE_PREFIX }}/yolo11:latest"
          echo "🏷️ Registry: ${{ env.REGISTRY }}"
          echo "🔗 Image URL: https://github.com/stevetowers098/nuro-padel/pkgs/container/nuro-padel%2Fyolo11"
          echo "🚀 Ready for deployment"
      
      - name: ❌ Build failure notification
        if: failure()
        run: |
          echo "❌ **YOLO11 BUILD FAILED**"
          echo "================================="
          echo "🚨 Build process encountered errors"
          echo "📝 Check the build logs above for details"
          echo "🔧 Common fixes:"
          echo "   - Check Dockerfile syntax in services/yolo11/"
          echo "   - Verify ultralytics version compatibility"
          echo "   - Check for C3k2 dependency issues"
          echo "   - Ensure model weights are accessible or fallback mode works"
          exit 1
      
      - name: 🚀 Deploy YOLO11 to VM - Start
        run: |
          echo "🚀 **YOLO11 DEPLOYMENT START**"
          echo "================================="
          echo "✅ Built and pushed: ${{ env.IMAGE_PREFIX }}/yolo11:latest"

      - name: 🔌 SSH Deploy YOLO11
        run: ssh padel-ai "cd /opt/padel-docker && docker-compose pull yolo11 && docker-compose up -d yolo11"

      - name: ✅ YOLO11 Deployment Completed
        run: echo "✅ **YOLO11 DEPLOYMENT COMPLETED**"

  deploy-mmpose:
    needs: detect-changes
    if: needs.detect-changes.outputs.mmpose == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v3
      
      - name: 🔍 Verify MMPose model requirements
        run: |
          echo "🔍 **MMPOSE MODEL WEIGHT VERIFICATION**"
          echo "================================="
          echo "📂 Checking MMPose service configuration..."
          
          if [ -f "services/mmpose/Dockerfile" ]; then
            echo "✅ Dockerfile found"
            if grep -q "/app/weights" services/mmpose/Dockerfile; then
              echo "⚠️  Dockerfile expects weights in /app/weights/"
              echo "📝 Service uses local file loading (no auto-download)"
            fi
            if grep -q "MMPOSE_AVAILABLE.*False" services/mmpose/main.py; then
              echo "✅ Service has MMPose fallback mode implemented"
            fi
            if grep -q "RTMPose.*HRNet" services/mmpose/main.py; then
              echo "✅ Service supports RTMPose-M and HRNet-W48 models"
            fi
            echo "✅ MMPose weight verification complete"
          else
            echo "❌ Dockerfile not found in services/mmpose/"
            exit 1
          fi
      
      - name: ⚙️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 🔐 Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 📦 Build and push MMPose image
        uses: docker/build-push-action@v5
        with:
          context: services/mmpose
          push: true
          tags: ${{ env.IMAGE_PREFIX }}/mmpose:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
        continue-on-error: false
        
      - name: 📊 Build success notification
        if: success()
        run: |
          echo "✅ **MMPOSE BUILD SUCCESSFUL**"
          echo "================================="
          echo "📦 Image: ${{ env.IMAGE_PREFIX }}/mmpose:latest"
          echo "🏷️ Registry: ${{ env.REGISTRY }}"
          echo "🔗 Image URL: https://github.com/stevetowers098/nuro-padel/pkgs/container/nuro-padel%2Fmmpose"
          echo "🚀 Ready for deployment"
      
      - name: ❌ Build failure notification
        if: failure()
        run: |
          echo "❌ **MMPOSE BUILD FAILED**"
          echo "================================="
          echo "🚨 Build process encountered errors"
          echo "📝 Check the build logs above for details"
          echo "🔧 Common fixes:"
          echo "   - Check Dockerfile syntax in services/mmpose/"
          echo "   - Verify MMPose/mmcv installation compatibility"
          echo "   - Check for OpenCV conflicts"
          echo "   - Ensure RTMPose/HRNet weights are accessible or fallback mode works"
          exit 1
      
      - name: 🚀 Deploy MMPose to VM - Start
        run: |
          echo "🚀 **MMPOSE DEPLOYMENT START**"
          echo "================================="
          echo "✅ Built and pushed: ${{ env.IMAGE_PREFIX }}/mmpose:latest"

      - name: 🔌 SSH Deploy MMPose
        run: ssh padel-ai "cd /opt/padel-docker && docker-compose pull mmpose && docker-compose up -d mmpose"

      - name: ✅ MMPose Deployment Completed
        run: echo "✅ **MMPOSE DEPLOYMENT COMPLETED**"

  deploy-yolo-nas:
    needs: detect-changes
    if: needs.detect-changes.outputs.yolo-nas == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v3
      
      - name: 🔍 Verify YOLO-NAS model requirements
        run: |
          echo "🔍 **YOLO-NAS MODEL WEIGHT VERIFICATION**"
          echo "================================="
          echo "📂 Checking YOLO-NAS service configuration..."
          
          if [ -f "services/yolo-nas/Dockerfile" ]; then
            echo "✅ Dockerfile found"
            if grep -q "/app/weights" services/yolo-nas/Dockerfile; then
              echo "⚠️  Dockerfile expects weights in /app/weights/"
              echo "📝 Service uses local file loading (no auto-download)"
            fi
            if grep -q "SUPER_GRADIENTS_AVAILABLE.*False" services/yolo-nas/main.py; then
              echo "✅ Service has Super Gradients fallback mode implemented"
            fi
            if grep -q "fallback.*model" services/yolo-nas/main.py; then
              echo "✅ Service has pose/object model fallback implemented"
            fi
            echo "✅ YOLO-NAS weight verification complete"
          else
            echo "❌ Dockerfile not found in services/yolo-nas/"
            exit 1
          fi
      
      - name: ⚙️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 🔐 Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 📦 Build and push YOLO-NAS image
        uses: docker/build-push-action@v5
        with:
          context: services/yolo-nas
          push: true
          tags: ${{ env.IMAGE_PREFIX }}/yolo-nas:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
        continue-on-error: false
        
      - name: 📊 Build success notification
        if: success()
        run: |
          echo "✅ **YOLO-NAS BUILD SUCCESSFUL**"
          echo "================================="
          echo "📦 Image: ${{ env.IMAGE_PREFIX }}/yolo-nas:latest"
          echo "🏷️ Registry: ${{ env.REGISTRY }}"
          echo "🔗 Image URL: https://github.com/stevetowers098/nuro-padel/pkgs/container/nuro-padel%2Fyolo-nas"
          echo "🚀 Ready for deployment"
      
      - name: ❌ Build failure notification
        if: failure()
        run: |
          echo "❌ **YOLO-NAS BUILD FAILED**"
          echo "================================="
          echo "🚨 Build process encountered errors"
          echo "📝 Check the build logs above for details"
          echo "🔧 Common fixes:"
          echo "   - Check Dockerfile syntax in services/yolo-nas/"
          echo "   - Verify super-gradients installation"
          echo "   - Check for PyTorch compatibility issues"
          echo "   - Ensure model weights are accessible or fallback mode works"
          exit 1
      
      - name: 🚀 Deploy YOLO-NAS to VM - Start
        run: |
          echo "🚀 **YOLO-NAS DEPLOYMENT START**"
          echo "================================="
          echo "✅ Built and pushed: ${{ env.IMAGE_PREFIX }}/yolo-nas:latest"

      - name: 🔌 SSH Deploy YOLO-NAS
        run: ssh padel-ai "cd /opt/padel-docker && docker-compose pull yolo-nas && docker-compose up -d yolo-nas"

      - name: ✅ YOLO-NAS Deployment Completed
        run: echo "✅ **YOLO-NAS DEPLOYMENT COMPLETED**"

  deploy-vitpose:
    needs: detect-changes
    if: needs.detect-changes.outputs.vitpose == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v3
      
      - name: 🔍 Verify ViTPose model requirements
        run: |
          echo "🔍 **VITPOSE++ MODEL WEIGHT VERIFICATION**"
          echo "================================="
          echo "📂 Checking ViTPose service configuration..."
          
          if [ -f "services/vitpose/Dockerfile" ]; then
            echo "✅ Dockerfile found"
            if grep -q "/app/weights" services/vitpose/Dockerfile; then
              echo "⚠️  Dockerfile expects weights in /app/weights/"
              echo "📝 Service uses local file loading (no auto-download)"
            fi
            if grep -q "MMPOSE_AVAILABLE.*False" services/vitpose/main.py; then
              echo "✅ Service has MMPose fallback mode implemented"
            fi
            if grep -q "ViTPose.*HRNet" services/vitpose/main.py; then
              echo "✅ Service supports ViTPose-Base and HRNet-W48 models"
            fi
            if grep -q "FP16.*precision" services/vitpose/main.py; then
              echo "✅ Service has FP16 memory optimization"
            fi
            echo "✅ ViTPose weight verification complete"
          else
            echo "❌ Dockerfile not found in services/vitpose/"
            exit 1
          fi
      
      - name: ⚙️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 🔐 Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 📦 Build and push ViTPose image
        uses: docker/build-push-action@v5
        with:
          context: services/vitpose
          push: true
          tags: ${{ env.IMAGE_PREFIX }}/vitpose:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
        continue-on-error: false
        
      - name: 📊 Build success notification
        if: success()
        run: |
          echo "✅ **VITPOSE++ BUILD SUCCESSFUL**"
          echo "================================="
          echo "📦 Image: ${{ env.IMAGE_PREFIX }}/vitpose:latest"
          echo "🏷️ Registry: ${{ env.REGISTRY }}"
          echo "🔗 Image URL: https://github.com/stevetowers098/nuro-padel/pkgs/container/nuro-padel%2Fvitpose"
          echo "🚀 Ready for deployment"
      
      - name: ❌ Build failure notification
        if: failure()
        run: |
          echo "❌ **VITPOSE++ BUILD FAILED**"
          echo "================================="
          echo "🚨 Build process encountered errors"
          echo "📝 Check the build logs above for details"
          echo "🔧 Common fixes:"
          echo "   - Check Dockerfile syntax in services/vitpose/"
          echo "   - Verify MMPose/mmcv installation compatibility"
          echo "   - Check for Vision Transformer dependencies"
          echo "   - Ensure ViTPose/HRNet weights are accessible or fallback mode works"
          exit 1
      
      - name: 🚀 Deploy ViTPose to VM - Start
        run: |
          echo "🚀 **VITPOSE DEPLOYMENT START**"
          echo "================================="
          echo "✅ Built and pushed: ${{ env.IMAGE_PREFIX }}/vitpose:latest"

      - name: 🔌 SSH Deploy ViTPose
        run: ssh padel-ai "cd /opt/padel-docker && docker-compose pull vitpose && docker-compose up -d vitpose"

      - name: ✅ ViTPose Deployment Completed
        run: echo "✅ **VITPOSE DEPLOYMENT COMPLETED**"

  deploy-rf-detr:
    needs: detect-changes
    if: needs.detect-changes.outputs.rf-detr == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v3
      
      - name: 🔍 Verify RF-DETR model requirements
        run: |
          echo "🔍 **RF-DETR MODEL WEIGHT VERIFICATION**"
          echo "================================="
          echo "📂 Checking RF-DETR service configuration..."
          
          if [ -f "services/rf-detr/Dockerfile" ]; then
            echo "✅ Dockerfile found"
            if grep -q "/app/weights" services/rf-detr/Dockerfile; then
              echo "⚠️  Dockerfile expects weights in /app/weights/"
              echo "📝 Service uses local file loading (no auto-download)"
            fi
            if grep -q "RF_DETR_AVAILABLE.*False" services/rf-detr/main.py; then
              echo "✅ Service has RF-DETR fallback mode implemented"
            fi
            if grep -q "resolution.*56" services/rf-detr/main.py; then
              echo "✅ Service has resolution constraint enforcement"
            fi
            if grep -q "FP16.*precision" services/rf-detr/main.py; then
              echo "✅ Service has FP16 memory optimization"
            fi
            echo "✅ RF-DETR weight verification complete"
          else
            echo "❌ Dockerfile not found in services/rf-detr/"
            exit 1
          fi
      
      - name: ⚙️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 🔐 Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 📦 Build and push RF-DETR image
        uses: docker/build-push-action@v5
        with:
          context: services/rf-detr
          push: true
          tags: ${{ env.IMAGE_PREFIX }}/rf-detr:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
        continue-on-error: false
        
      - name: 📊 Build success notification
        if: success()
        run: |
          echo "✅ **RF-DETR BUILD SUCCESSFUL**"
          echo "================================="
          echo "📦 Image: ${{ env.IMAGE_PREFIX }}/rf-detr:latest"
          echo "🏷️ Registry: ${{ env.REGISTRY }}"
          echo "🔗 Image URL: https://github.com/stevetowers098/nuro-padel/pkgs/container/nuro-padel%2Frf-detr"
          echo "🚀 Ready for deployment"
      
      - name: ❌ Build failure notification
        if: failure()
        run: |
          echo "❌ **RF-DETR BUILD FAILED**"
          echo "================================="
          echo "🚨 Build process encountered errors"
          echo "📝 Check the build logs above for details"
          echo "🔧 Common fixes:"
          echo "   - Check Dockerfile syntax in services/rf-detr/"
          echo "   - Verify RF-DETR library installation"
          echo "   - Check for PyTorch/transformers compatibility"
          echo "   - Ensure RF-DETR weights are accessible or fallback mode works"
          exit 1
      
      - name: 🚀 Deploy RF-DETR to VM - Start
        run: |
          echo "🚀 **RF-DETR DEPLOYMENT START**"
          echo "================================="
          echo "✅ Built and pushed: ${{ env.IMAGE_PREFIX }}/rf-detr:latest"

      - name: 🔌 SSH Deploy RF-DETR
        run: ssh padel-ai "cd /opt/padel-docker && docker-compose pull rf-detr && docker-compose up -d rf-detr"

      - name: ✅ RF-DETR Deployment Completed
        run: echo "✅ **RF-DETR DEPLOYMENT COMPLETED**"

  deploy-nginx:
    needs: detect-changes
    if: needs.detect-changes.outputs.nginx == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Deploy Nginx configuration - Start
        run: |
          echo "🚀 **NGINX DEPLOYMENT START**"
          echo "================================="
          echo "📄 Updated files: deployment/nginx.conf, deployment/docker-compose.yml"

      - name: 🔌 SSH Deploy Nginx
        run: ssh padel-ai "cd /opt/padel-docker && docker-compose up -d nginx"

      - name: ✅ Nginx Deployment Completed
        run: echo "✅ **NGINX DEPLOYMENT COMPLETED**"
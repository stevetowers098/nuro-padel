name: Smart Container Build
on:
  push:
    branches: [ main, develop, master, docker-containers, feature/*, fix/*, hotfix/* ]
  pull_request:
    branches: [ main, master, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_PREFIX: stevetowers098/nuro-padel

jobs:
  detect-changes:
    runs-on: ubuntu-22.04
    outputs:
      yolo-combined: ${{ steps.changes.outputs.yolo-combined }}
      mmpose: ${{ steps.changes.outputs.mmpose }}
      yolo-nas: ${{ steps.changes.outputs.yolo-nas }}
      nginx: ${{ steps.changes.outputs.nginx }}
      docker-compose: ${{ steps.changes.outputs.docker-compose }}
      docs-only: ${{ steps.changes.outputs.docs-only }}
      dependencies-only: ${{ steps.changes.outputs.dependencies-only }}
      code-changes: ${{ steps.changes.outputs.code-changes }}
      config-changes: ${{ steps.changes.outputs.config-changes }}
      scripts-only: ${{ steps.changes.outputs.scripts-only }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            yolo-combined:
              - 'services/yolo-combined/**'
            mmpose:
              - 'services/mmpose/**'
            yolo-nas:
              - 'services/yolo-nas/**'
            nginx:
              - 'deployment/nginx*.conf'
            docker-compose:
              - 'deployment/docker-compose*.yml'
              - 'Dockerfile*'
            docs-only:
              - '*.md'
              - 'docs/**'
              - 'README*'
              - 'LICENSE*'
              - '.gitignore'
            dependencies-only:
              - 'requirements/**'
              - '**/requirements.txt'
              - '**/package.json'
              - '**/package-lock.json'
            code-changes:
              - '**/*.py'
              - '**/*.js'
              - '**/*.ts'
              - '**/*.jsx'
              - '**/*.tsx'
            config-changes:
              - '**/configs/**'
              - '*.conf'
              - '*.yml'
              - '*.yaml'
              - '*.json'
              - '.env*'
            scripts-only:
              - 'scripts/**'
              - '*.sh'
              - '*.bat'
              - 'deploy*.sh'

  build-yolo-combined:
    name: üöÄ Build YOLO Combined Service
    needs: detect-changes
    if: needs.detect-changes.outputs.yolo-combined == 'true'
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/yolo-combined
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push YOLO Combined image
        run: |
          TAGS="${{ steps.meta.outputs.tags }}"
          LABELS="${{ steps.meta.outputs.labels }}"
          
          for attempt in 1 2 3; do
            echo "üî® Building YOLO Combined (attempt $attempt/3)..."
            
            if docker buildx build \
              --push \
              --cache-from type=gha \
              --cache-to type=gha,mode=max \
              $(echo "$TAGS" | sed 's/^/--tag /' | tr '\n' ' ') \
              $(echo "$LABELS" | sed 's/^/--label /' | tr '\n' ' ') \
              ./services/yolo-combined; then
              echo "‚úÖ YOLO Combined build successful"
              exit 0
            fi
            
            echo "‚ùå Build attempt $attempt failed"
            if [ $attempt -lt 3 ]; then
              echo "‚è≥ Retrying in 30 seconds..."
              sleep 30
            fi
          done
          
          echo "üö® YOLO Combined build failed after 3 attempts"
          exit 1

  build-mmpose:
    name: ü§∏ Build MMPose Service
    needs: detect-changes
    if: needs.detect-changes.outputs.mmpose == 'true'
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/mmpose
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push MMPose image
        run: |
          TAGS="${{ steps.meta.outputs.tags }}"
          LABELS="${{ steps.meta.outputs.labels }}"
          
          for attempt in 1 2 3; do
            echo "üî® Building MMPose (attempt $attempt/3)..."
            
            if docker buildx build \
              --push \
              --cache-from type=gha \
              --cache-to type=gha,mode=max \
              $(echo "$TAGS" | sed 's/^/--tag /' | tr '\n' ' ') \
              $(echo "$LABELS" | sed 's/^/--label /' | tr '\n' ' ') \
              ./services/mmpose; then
              echo "‚úÖ MMPose build successful"
              exit 0
            fi
            
            echo "‚ùå Build attempt $attempt failed"
            if [ $attempt -lt 3 ]; then
              echo "‚è≥ Retrying in 30 seconds..."
              sleep 30
            fi
          done
          
          echo "üö® MMPose build failed after 3 attempts"
          exit 1

  build-yolo-nas:
    name: üéØ Build YOLO-NAS Service
    needs: detect-changes
    if: needs.detect-changes.outputs.yolo-nas == 'true'
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/yolo-nas
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push YOLO-NAS image
        run: |
          TAGS="${{ steps.meta.outputs.tags }}"
          LABELS="${{ steps.meta.outputs.labels }}"
          
          for attempt in 1 2 3; do
            echo "üî® Building YOLO-NAS (attempt $attempt/3)..."
            
            if docker buildx build \
              --push \
              --cache-from type=gha \
              --cache-to type=gha,mode=max \
              $(echo "$TAGS" | sed 's/^/--tag /' | tr '\n' ' ') \
              $(echo "$LABELS" | sed 's/^/--label /' | tr '\n' ' ') \
              ./services/yolo-nas; then
              echo "‚úÖ YOLO-NAS build successful"
              exit 0
            fi
            
            echo "‚ùå Build attempt $attempt failed"
            if [ $attempt -lt 3 ]; then
              echo "‚è≥ Retrying in 30 seconds..."
              sleep 30
            fi
          done
          
          echo "üö® YOLO-NAS build failed after 3 attempts"
          exit 1

  build-summary:
    name: üìä Build Summary
    needs: [detect-changes, build-yolo-combined, build-mmpose, build-yolo-nas]
    if: always()
    runs-on: ubuntu-22.04
    steps:
      - name: Validate Build Results
        run: |
          echo "üîç Validating build results..."
          
          YOLO_COMBINED_RESULT="${{ needs.build-yolo-combined.result }}"
          MMPOSE_RESULT="${{ needs.build-mmpose.result }}"
          YOLO_NAS_RESULT="${{ needs.build-yolo-nas.result }}"
          
          echo "Build Results:"
          echo "  üöÄ YOLO Combined: $YOLO_COMBINED_RESULT"
          echo "  ü§∏ MMPose: $MMPOSE_RESULT"
          echo "  üéØ YOLO-NAS: $YOLO_NAS_RESULT"
          
          # Fail workflow if any build failed
          if [[ "$YOLO_COMBINED_RESULT" == "failure" ]] || [[ "$MMPOSE_RESULT" == "failure" ]] || [[ "$YOLO_NAS_RESULT" == "failure" ]]; then
            echo ""
            echo "üö® BUILD FAILED!"
            echo "‚ùå One or more container builds failed"
            exit 1
          fi
          
          echo "‚úÖ All builds completed successfully"
          
      - name: üìä Container Build Analytics
        run: |
          echo "üöÄ Smart Build Analytics"
          echo "=============================================="
          
          # Calculate build efficiency
          total_services=3
          changed_services=$(( ${{ needs.detect-changes.outputs.yolo-combined == 'true' && 1 || 0 }} + ${{ needs.detect-changes.outputs.mmpose == 'true' && 1 || 0 }} + ${{ needs.detect-changes.outputs.yolo-nas == 'true' && 1 || 0 }} ))
          skipped_services=$((total_services - changed_services))
          
          echo "üì¶ Container Images Built:"
          echo "  üöÄ YOLO Combined: ${{ needs.detect-changes.outputs.yolo-combined == 'true' && '‚úÖ Built' || '‚è≠Ô∏è Skipped' }}"
          echo "  ü§∏ MMPose: ${{ needs.detect-changes.outputs.mmpose == 'true' && '‚úÖ Built' || '‚è≠Ô∏è Skipped' }}"
          echo "  üéØ YOLO-NAS: ${{ needs.detect-changes.outputs.yolo-nas == 'true' && '‚úÖ Built' || '‚è≠Ô∏è Skipped' }}"
          
          echo ""
          echo "üìà Build Efficiency:"
          echo "  ‚è±Ô∏è  Images built: $changed_services/$total_services"
          echo "  ‚ö° Images skipped: $skipped_services"
          echo "  üéØ Time saved: $((skipped_services * 12)) minutes"
          echo "  üí∞ Build optimization: $((skipped_services * 100 / total_services))%"
          
          if [[ $changed_services -eq 0 ]]; then
            echo "  üéâ No changes detected - maximum efficiency!"
          elif [[ $skipped_services -gt 1 ]]; then
            echo "  üëç Good optimization achieved!"
          else
            echo "  üîÑ Standard build completed!"
          fi

  deploy-to-vm:
    name: üöÄ Deploy to VM
    needs: [detect-changes, build-summary]
    if: always() && (needs.build-yolo-combined.result == 'success' || needs.build-mmpose.result == 'success' || needs.build-yolo-nas.result == 'success' || needs.build-yolo-combined.result == 'skipped' || needs.build-mmpose.result == 'skipped' || needs.build-yolo-nas.result == 'skipped')
    runs-on: ubuntu-22.04
    steps:
      - name: Deployment Instructions
        run: |
          echo "üöÄ Images built and pushed successfully!"
          echo "üìã To deploy to your VM, run the following commands:"
          echo ""
          echo "# Deploy to VM and start containers:"
          echo "./scripts/deploy.sh --vm"
          echo ""
          echo "# Or deploy locally:"
          echo "./scripts/deploy.sh --fast"
          echo ""
          echo "üîó Your services will be available at:"
          echo "  - YOLO Combined: http://35.189.53.46:8001/healthz"
          echo "  - MMPose:        http://35.189.53.46:8003/healthz"
          echo "  - YOLO-NAS:      http://35.189.53.46:8004/healthz"
          echo "  - Load Balancer: http://35.189.53.46:8080/"
          
      # Uncomment the section below to enable automatic VM deployment
      # - name: Deploy to VM (Automatic)
      #   run: |
      #     echo "üöÄ Deploying to VM automatically..."
      #     # Add your VM SSH key to GitHub secrets as VM_SSH_KEY
      #     # mkdir -p ~/.ssh
      #     # echo "${{ secrets.VM_SSH_KEY }}" > ~/.ssh/id_rsa
      #     # chmod 600 ~/.ssh/id_rsa
      #     # ssh-keyscan -H 35.189.53.46 >> ~/.ssh/known_hosts
      #     # ./scripts/deploy.sh --vm
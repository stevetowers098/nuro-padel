name: Smart Container Build
on:
  push:
    branches: [ main, develop, master, docker-containers, feature/*, fix/*, hotfix/* ]
  pull_request:
    branches: [ main, master, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_PREFIX: stevetowers098/nuro-padel

jobs:
  detect-changes:
    runs-on: ubuntu-22.04
    outputs:
      yolo-combined: ${{ steps.changes.outputs.yolo-combined }}
      mmpose: ${{ steps.changes.outputs.mmpose }}
      yolo-nas: ${{ steps.changes.outputs.yolo-nas }}
      rf-detr: ${{ steps.changes.outputs.rf-detr }}
      vitpose: ${{ steps.changes.outputs.vitpose }}
      nginx: ${{ steps.changes.outputs.nginx }}
      docker-compose: ${{ steps.changes.outputs.docker-compose }}
      docs-only: ${{ steps.changes.outputs.docs-only }}
      dependencies-only: ${{ steps.changes.outputs.dependencies-only }}
      code-changes: ${{ steps.changes.outputs.code-changes }}
      config-changes: ${{ steps.changes.outputs.config-changes }}
      scripts-only: ${{ steps.changes.outputs.scripts-only }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            yolo-combined:
              - 'services/yolo-combined/**'
            mmpose:
              - 'services/mmpose/**'
            yolo-nas:
              - 'services/yolo-nas/**'
            rf-detr:
              - 'services/rf-detr/**'
            vitpose:
              - 'services/vitpose/**'
            nginx:
              - 'deployment/nginx*.conf'
            docker-compose:
              - 'deployment/docker-compose*.yml'
              - 'Dockerfile*'
            docs-only:
              - '*.md'
              - 'docs/**'
              - 'README*'
              - 'LICENSE*'
              - '.gitignore'
            dependencies-only:
              - 'requirements/**'
              - '**/requirements.txt'
              - '**/package.json'
              - '**/package-lock.json'
            code-changes:
              - '**/*.py'
              - '**/*.js'
              - '**/*.ts'
              - '**/*.jsx'
              - '**/*.tsx'
            config-changes:
              - '**/configs/**'
              - '*.conf'
              - '*.yml'
              - '*.yaml'
              - '*.json'
              - '.env*'
            scripts-only:
              - 'scripts/**'
              - '*.sh'
              - '*.bat'
              - 'deploy*.sh'

  build-yolo-combined:
    name: üöÄ Build YOLO Combined Service
    needs: detect-changes
    if: needs.detect-changes.outputs.yolo-combined == 'true'
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/yolo-combined
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push YOLO Combined image
        run: |
          TAGS="${{ steps.meta.outputs.tags }}"
          LABELS="${{ steps.meta.outputs.labels }}"
          
          for attempt in 1 2 3; do
            echo "üî® Building YOLO Combined (attempt $attempt/3)..."
            
            if docker buildx build \
              --push \
              --cache-from type=gha \
              --cache-to type=gha,mode=max \
              $(echo "$TAGS" | sed 's/^/--tag /' | tr '\n' ' ') \
              $(echo "$LABELS" | sed 's/^/--label /' | tr '\n' ' ') \
              ./services/yolo-combined; then
              echo "‚úÖ YOLO Combined build successful"
              exit 0
            fi
            
            echo "‚ùå Build attempt $attempt failed"
            if [ $attempt -lt 3 ]; then
              echo "‚è≥ Retrying in 30 seconds..."
              sleep 30
            fi
          done
          
          echo "üö® YOLO Combined build failed after 3 attempts"
          exit 1

  build-mmpose:
    name: ü§∏ Build MMPose Service
    needs: detect-changes
    if: needs.detect-changes.outputs.mmpose == 'true'
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/mmpose
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push MMPose image
        run: |
          TAGS="${{ steps.meta.outputs.tags }}"
          LABELS="${{ steps.meta.outputs.labels }}"
          
          for attempt in 1 2 3; do
            echo "üî® Building MMPose (attempt $attempt/3)..."
            
            if docker buildx build \
              --push \
              --cache-from type=gha \
              --cache-to type=gha,mode=max \
              $(echo "$TAGS" | sed 's/^/--tag /' | tr '\n' ' ') \
              $(echo "$LABELS" | sed 's/^/--label /' | tr '\n' ' ') \
              ./services/mmpose; then
              echo "‚úÖ MMPose build successful"
              exit 0
            fi
            
            echo "‚ùå Build attempt $attempt failed"
            if [ $attempt -lt 3 ]; then
              echo "‚è≥ Retrying in 30 seconds..."
              sleep 30
            fi
          done
          
          echo "üö® MMPose build failed after 3 attempts"
          exit 1

  build-yolo-nas:
    name: üéØ Build YOLO-NAS Service
    needs: detect-changes
    if: needs.detect-changes.outputs.yolo-nas == 'true'
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/yolo-nas
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push YOLO-NAS image
        run: |
          TAGS="${{ steps.meta.outputs.tags }}"
          LABELS="${{ steps.meta.outputs.labels }}"
          
          for attempt in 1 2 3; do
            echo "üî® Building YOLO-NAS (attempt $attempt/3)..."
            
            if docker buildx build \
              --push \
              --cache-from type=gha \
              --cache-to type=gha,mode=max \
              $(echo "$TAGS" | sed 's/^/--tag /' | tr '\n' ' ') \
              $(echo "$LABELS" | sed 's/^/--label /' | tr '\n' ' ') \
              ./services/yolo-nas; then
              echo "‚úÖ YOLO-NAS build successful"
              exit 0
            fi
            
            echo "‚ùå Build attempt $attempt failed"
            if [ $attempt -lt 3 ]; then
              echo "‚è≥ Retrying in 30 seconds..."
              sleep 30
            fi
          done
          
          echo "üö® YOLO-NAS build failed after 3 attempts"
          exit 1

  build-rf-detr:
    name: üéØ Build RF-DETR Service
    needs: detect-changes
    if: needs.detect-changes.outputs.rf-detr == 'true'
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/rf-detr
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push RF-DETR image
        run: |
          TAGS="${{ steps.meta.outputs.tags }}"
          LABELS="${{ steps.meta.outputs.labels }}"
          
          for attempt in 1 2 3; do
            echo "üî® Building RF-DETR (attempt $attempt/3)..."
            
            if docker buildx build \
              --push \
              --cache-from type=gha \
              --cache-to type=gha,mode=max \
              $(echo "$TAGS" | sed 's/^/--tag /' | tr '\n' ' ') \
              $(echo "$LABELS" | sed 's/^/--label /' | tr '\n' ' ') \
              ./services/rf-detr; then
              echo "‚úÖ RF-DETR build successful"
              exit 0
            fi
            
            echo "‚ùå Build attempt $attempt failed"
            if [ $attempt -lt 3 ]; then
              echo "‚è≥ Retrying in 30 seconds..."
              sleep 30
            fi
          done
          
          echo "üö® RF-DETR build failed after 3 attempts"
          exit 1

  build-vitpose:
    name: üí™ Build ViTPose Service
    needs: detect-changes
    if: needs.detect-changes.outputs.vitpose == 'true'
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/vitpose
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push ViTPose image
        run: |
          TAGS="${{ steps.meta.outputs.tags }}"
          LABELS="${{ steps.meta.outputs.labels }}"
          
          for attempt in 1 2 3; do
            echo "üî® Building ViTPose (attempt $attempt/3)..."
            
            if docker buildx build \
              --push \
              --cache-from type=gha \
              --cache-to type=gha,mode=max \
              $(echo "$TAGS" | sed 's/^/--tag /' | tr '\n' ' ') \
              $(echo "$LABELS" | sed 's/^/--label /' | tr '\n' ' ') \
              ./services/vitpose; then
              echo "‚úÖ ViTPose build successful"
              exit 0
            fi
            
            echo "‚ùå Build attempt $attempt failed"
            if [ $attempt -lt 3 ]; then
              echo "‚è≥ Retrying in 30 seconds..."
              sleep 30
            fi
          done
          
          echo "üö® ViTPose build failed after 3 attempts"
          exit 1

  build-summary:
    name: üìä Build Summary
    needs: [detect-changes, build-yolo-combined, build-mmpose, build-yolo-nas, build-rf-detr, build-vitpose]
    if: always()
    runs-on: ubuntu-22.04
    steps:
      - name: Validate Build Results
        run: |
          echo "üîç Validating build results..."
          
          YOLO_COMBINED_RESULT="${{ needs.build-yolo-combined.result }}"
          MMPOSE_RESULT="${{ needs.build-mmpose.result }}"
          YOLO_NAS_RESULT="${{ needs.build-yolo-nas.result }}"
          RF_DETR_RESULT="${{ needs.build-rf-detr.result }}"
          VITPOSE_RESULT="${{ needs.build-vitpose.result }}"
          
          echo "Build Results:"
          echo "  üöÄ YOLO Combined: $YOLO_COMBINED_RESULT"
          echo "  ü§∏ MMPose: $MMPOSE_RESULT"
          echo "  üéØ YOLO-NAS: $YOLO_NAS_RESULT"
          echo "  üéØ RF-DETR: $RF_DETR_RESULT"
          echo "  üí™ ViTPose: $VITPOSE_RESULT"
          
          # Fail workflow if any build failed
          if [[ "$YOLO_COMBINED_RESULT" == "failure" ]] || [[ "$MMPOSE_RESULT" == "failure" ]] || [[ "$YOLO_NAS_RESULT" == "failure" ]] || [[ "$RF_DETR_RESULT" == "failure" ]] || [[ "$VITPOSE_RESULT" == "failure" ]]; then
            echo ""
            echo "üö® BUILD FAILED!"
            echo "‚ùå One or more container builds failed"
            exit 1
          fi
          
          echo "‚úÖ All builds completed successfully"
          
      - name: üìä Container Build Analytics
        run: |
          echo "üöÄ Smart Build Analytics"
          echo "=============================================="
          
          # Calculate build efficiency
          total_services=5
          changed_services=$(( ${{ needs.detect-changes.outputs.yolo-combined == 'true' && 1 || 0 }} + ${{ needs.detect-changes.outputs.mmpose == 'true' && 1 || 0 }} + ${{ needs.detect-changes.outputs.yolo-nas == 'true' && 1 || 0 }} + ${{ needs.detect-changes.outputs.rf-detr == 'true' && 1 || 0 }} + ${{ needs.detect-changes.outputs.vitpose == 'true' && 1 || 0 }} ))
          skipped_services=$((total_services - changed_services))
          
          echo "üì¶ Container Images Built:"
          echo "  üöÄ YOLO Combined: ${{ needs.detect-changes.outputs.yolo-combined == 'true' && '‚úÖ Built' || '‚è≠Ô∏è Skipped' }}"
          echo "  ü§∏ MMPose: ${{ needs.detect-changes.outputs.mmpose == 'true' && '‚úÖ Built' || '‚è≠Ô∏è Skipped' }}"
          echo "  üéØ YOLO-NAS: ${{ needs.detect-changes.outputs.yolo-nas == 'true' && '‚úÖ Built' || '‚è≠Ô∏è Skipped' }}"
          echo "  üéØ RF-DETR: ${{ needs.detect-changes.outputs.rf-detr == 'true' && '‚úÖ Built' || '‚è≠Ô∏è Skipped' }}"
          echo "  üí™ ViTPose: ${{ needs.detect-changes.outputs.vitpose == 'true' && '‚úÖ Built' || '‚è≠Ô∏è Skipped' }}"
          
          echo ""
          echo "üìà Build Efficiency:"
          echo "  ‚è±Ô∏è  Images built: $changed_services/$total_services"
          echo "  ‚ö° Images skipped: $skipped_services"
          echo "  üéØ Time saved: $((skipped_services * 12)) minutes"
          echo "  üí∞ Build optimization: $((skipped_services * 100 / total_services))%"
          
          if [[ $changed_services -eq 0 ]]; then
            echo "  üéâ No changes detected - maximum efficiency!"
          elif [[ $skipped_services -gt 1 ]]; then
            echo "  üëç Good optimization achieved!"
          else
            echo "  üîÑ Standard build completed!"
          fi

  start-vm:
    name: üü¢ Start GCP VM
    needs: [detect-changes, build-summary]
    if: always() && (needs.detect-changes.outputs.docker-compose == 'true' || needs.build-yolo-combined.result == 'success' || needs.build-mmpose.result == 'success' || needs.build-yolo-nas.result == 'success' || needs.build-rf-detr.result == 'success' || needs.build-vitpose.result == 'success' || needs.build-yolo-combined.result == 'skipped' || needs.build-mmpose.result == 'skipped' || needs.build-yolo-nas.result == 'skipped' || needs.build-rf-detr.result == 'skipped' || needs.build-vitpose.result == 'skipped')
    runs-on: ubuntu-22.04
    steps:
      - name: üîç Debug Job Conditions
        run: |
          echo "üîç DEBUGGING START-VM JOB CONDITIONS"
          echo "====================================="
          echo "Build Results:"
          echo "  YOLO Combined: ${{ needs.build-yolo-combined.result }}"
          echo "  MMPose: ${{ needs.build-mmpose.result }}"
          echo "  YOLO-NAS: ${{ needs.build-yolo-nas.result }}"
          echo "  RF-DETR: ${{ needs.build-rf-detr.result }}"
          echo "  ViTPose: ${{ needs.build-vitpose.result }}"
          echo "  Build Summary: ${{ needs.build-summary.result }}"
          echo ""
          echo "‚úÖ start-vm job is running - conditions were met!"
          
      - name:  Checkout repository
        uses: actions/checkout@v4

      - name: üîê Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: ‚òÅÔ∏è Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: üîç Debug SSH Configuration
        run: |
          echo "üîç DEBUGGING SSH CONFIGURATION"
          echo "=============================="
          echo "VM_HOST: ${{ secrets.VM_HOST }}"
          echo "SSH Key length: ${#SSH_KEY} characters"
          echo "Username: Towers"
          echo "Zone: australia-southeast1-a ‚úÖ"
          echo "Instance: padel-ai ‚úÖ"
          echo ""
          echo "üîß CONFIGURATION VERIFICATION:"
          echo "   ‚úÖ Instance: padel-ai in australia-southeast1-a"
          echo "   ‚úÖ Username: Towers (case-sensitive)"
          echo "   ‚úÖ SSH Key: ${#SSH_KEY} characters"
          echo ""
          echo "üîç TROUBLESHOOTING STEPS:"
          echo "   1. Verify VM is running"
          echo "   2. Check VM external IP matches VM_HOST secret"
          echo "   3. Test SSH connectivity with verbose output"
          echo "   4. Check firewall rules on VM"
          echo ""
        env:
          SSH_KEY: ${{ secrets.VM_SSH_KEY }}

      - name:  Start VM if stopped
        run: |
          echo "üîç Checking VM status..."
          VM_STATUS=$(gcloud compute instances describe padel-ai --zone=australia-southeast1-a --format="value(status)")
          echo "Current VM status: $VM_STATUS"
          
          if [ "$VM_STATUS" = "TERMINATED" ] || [ "$VM_STATUS" = "STOPPED" ]; then
            echo "ÔøΩ Starting VM (currently $VM_STATUS)..."
            gcloud compute instances start padel-ai --zone=australia-southeast1-a
            echo "‚è≥ Waiting for VM to be ready..."
            
            # Wait for VM to start and be ready for SSH
            for i in {1..12}; do
              echo "‚è±Ô∏è  Wait attempt $i/12 (30 seconds each)"
              sleep 30
              
              VM_STATUS=$(gcloud compute instances describe padel-ai --zone=australia-southeast1-a --format="value(status)")
              if [ "$VM_STATUS" = "RUNNING" ]; then
                echo "‚úÖ VM is running, testing SSH connectivity..."
                
                # Test SSH connectivity with timeout
                                echo "${{ secrets.VM_SSH_KEY }}" > /tmp/ssh_key
                                chmod 600 /tmp/ssh_key
                                if timeout 10 ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=no -i /tmp/ssh_key Towers@${{ secrets.VM_HOST }} "echo 'SSH test successful'" 2>/dev/null; then
                                  rm -f /tmp/ssh_key
                                  echo "‚úÖ VM is ready for deployment!"
                                  break
                                else
                                  rm -f /tmp/ssh_key
                                  echo "‚è≥ VM running but SSH not ready yet..."
                                fi
              else
                echo "‚è≥ VM status: $VM_STATUS, continuing to wait..."
              fi
              
              if [ $i -eq 12 ]; then
                echo "‚ùå VM failed to become ready after 6 minutes"
                exit 1
              fi
            done
          else
            echo "‚úÖ VM is already running ($VM_STATUS)"
            echo "üîç Testing SSH connectivity on already-running VM..."
            
            # Create temporary SSH key file for diagnostics
            echo "${{ secrets.VM_SSH_KEY }}" > /tmp/ssh_key
            chmod 600 /tmp/ssh_key
            
            echo "üîç Detailed SSH test with verbose output..."
            if timeout 15 ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -v -i /tmp/ssh_key Towers@${{ secrets.VM_HOST }} "echo 'SSH test successful - $(date)'" 2>&1; then
              echo "‚úÖ VM is ready for deployment!"
            else
              echo "‚ùå CRITICAL: SSH connectivity failed on running VM!"
              echo "üîç Running additional diagnostics..."
              
              # Get VM external IP for diagnostics
              VM_EXTERNAL_IP=$(gcloud compute instances describe padel-ai --zone=australia-southeast1-a --format="value(networkInterfaces[0].accessConfigs[0].natIP)")
              echo "VM External IP: $VM_EXTERNAL_IP"
              echo "Expected VM_HOST: ${{ secrets.VM_HOST }}"
              
              # Test basic connectivity
              if ping -c 3 ${{ secrets.VM_HOST }} >/dev/null 2>&1; then
                echo "‚úÖ VM is reachable via ping"
              else
                echo "‚ùå VM is not reachable via ping"
              fi
              
              # Test SSH port
              if timeout 5 bash -c "echo >/dev/tcp/${{ secrets.VM_HOST }}/22" 2>/dev/null; then
                echo "‚úÖ SSH port 22 is open"
                echo "‚ùå SSH key or authentication issue"
              else
                echo "‚ùå SSH port 22 is not accessible"
                echo "‚ùå Network or firewall issue"
              fi
              
              echo "üö® FAILING DEPLOYMENT - SSH must work for deployment to succeed"
              echo "üí° Possible causes:"
              echo "   - SSH key is incorrect, expired, or doesn't match VM"
              echo "   - VM_HOST secret points to wrong IP address"
              echo "   - VM firewall blocking SSH access"
              echo "   - Wrong username (should be 'Towers')"
              rm -f /tmp/ssh_key
              exit 1
            fi
            
            rm -f /tmp/ssh_key
          fi

  deploy-to-vm:
    name: üöÄ Deploy to VM
    needs: [start-vm]
    runs-on: ubuntu-22.04
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        
      - name: üöÄ Deploy to VM
        run: |
          echo "üöÄ Deploying all 5 AI services to VM..."
          echo "‚è∞ Deployment started at: $(date)"
          
          # Use the correct VM IP from previous step or fallback
          VM_IP="${VM_HOST_FOR_DEPLOY:-${{ secrets.VM_HOST }}}"
          echo "Deploying to VM: $VM_IP"
          
          # Create SSH key file
          echo "${{ secrets.VM_SSH_KEY }}" > /tmp/deploy_ssh_key
          chmod 600 /tmp/deploy_ssh_key
          
          # Test which username works (try both Towers and towers)
          if timeout 10 ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i /tmp/deploy_ssh_key Towers@$VM_IP "echo 'test'" 2>/dev/null; then
            SSH_USER="Towers"
            echo "‚úÖ Using username: Towers"
          elif timeout 10 ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i /tmp/deploy_ssh_key towers@$VM_IP "echo 'test'" 2>/dev/null; then
            SSH_USER="towers"
            echo "‚úÖ Using username: towers"
          else
            echo "‚ùå SSH authentication failed with both usernames"
            rm -f /tmp/deploy_ssh_key
            exit 1
          fi
          
          # Deploy using working SSH configuration
          ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i /tmp/deploy_ssh_key $SSH_USER@$VM_IP << 'EOF'
            echo "üöÄ Starting deployment on VM..."
            echo "‚è∞ Deployment started at: $(date)"
            
            # Create deployment directory if it doesn't exist
            sudo mkdir -p /opt/padel-docker
            cd /opt/padel-docker
            
            # üîß FIX: Check for corrupted docker-compose.yml and repair
            echo "üîç Checking docker-compose.yml integrity..."
            if [ ! -f docker-compose.yml ] || ! docker-compose config > /dev/null 2>&1; then
              echo "‚ö†Ô∏è  CORRUPTED or MISSING docker-compose.yml detected! Downloading from GitHub..."
              
              # Backup corrupted file if it exists
              if [ -f docker-compose.yml ]; then
                cp docker-compose.yml docker-compose.yml.corrupted-backup-$(date +%Y%m%d-%H%M%S)
              fi
              
              # Download fresh version from GitHub (using current branch)
              curl -o docker-compose.yml https://raw.githubusercontent.com/stevetowers098/nuro-padel/${{ github.ref_name }}/deployment/docker-compose.yml
              
              # Validate new file
              if docker-compose -f docker-compose.yml config > /dev/null 2>&1; then
                echo "‚úÖ docker-compose.yml downloaded and validated successfully"
              else
                echo "‚ùå Downloaded file is invalid! Manual intervention required."
                exit 1
              fi
            else
              echo "‚úÖ docker-compose.yml is valid"
            fi
            
            # Download nginx config if missing
            if [ ! -f nginx.conf ]; then
              echo "üì• Downloading nginx.conf..."
              curl -o nginx.conf https://raw.githubusercontent.com/stevetowers098/nuro-padel/${{ github.ref_name }}/deployment/nginx.conf
            fi
            
            echo "üîÑ Building and deploying services on VM (using local build contexts)..."
            docker-compose up -d --build --remove-orphans
            
            echo "‚è≥ Waiting for services to start..."
            sleep 30
            
            echo "‚úÖ Deployment complete!"
            echo "üìä Service Status:"
            docker-compose ps
            
            echo "üîç Container Health:"
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          EOF
          
          # Clean up SSH key
          rm -f /tmp/deploy_ssh_key
          
          echo "‚úÖ VM deployment completed successfully!"

  health-check:
    name: üè• Health Check & Validation
    needs: [deploy-to-vm]
    runs-on: ubuntu-22.04
    steps:
      - name: ‚è≥ Wait for services to stabilize
        run: |
          echo "‚è≥ Waiting 180 seconds for all 5 AI services to fully start and load models..."
          echo "üîÑ This includes GPU initialization and model loading time"
          echo "üìä Services starting: YOLO Combined, MMPose, YOLO-NAS, RF-DETR, ViTPose"
          
          # Incremental wait with progress updates
          for i in {1..6}; do
            echo "‚è±Ô∏è  Wait progress: ${i}/6 (30 seconds each)"
            sleep 30
          done
          
          echo "‚úÖ 180-second wait period completed - proceeding with health checks"

      - name: üè• Comprehensive Health Check
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VM_HOST }}
          username: Towers
          key: ${{ secrets.VM_SSH_KEY }}
          timeout: 120s
          script: |
            echo "üè• Starting comprehensive health checks..."
            echo "‚è∞ Health check started at: $(date)"
            
            cd /opt/padel-docker
            
            echo "üê≥ Docker Container Status:"
            echo "================================"
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            echo ""
            
            echo "üìã Docker Compose Service Status:"
            echo "======================================"
            docker-compose ps
            echo ""
            
            # Health check function with retries
            check_service_health() {
              local service_name=$1
              local port=$2
              local endpoint="http://localhost:${port}/healthz"
              local max_attempts=3
              local attempt=1
              
              echo "üîç Testing ${service_name} on port ${port}..."
              
              while [ $attempt -le $max_attempts ]; do
                echo "   Attempt ${attempt}/${max_attempts}..."
                
                if timeout 45 curl -f -s "$endpoint" > /dev/null 2>&1; then
                  echo "‚úÖ ${service_name} health check PASSED"
                  local response=$(curl -s "$endpoint" 2>/dev/null || echo "No response")
                  echo "üìä ${service_name} response: $response"
                  return 0
                else
                  echo "‚ö†Ô∏è  ${service_name} attempt ${attempt}/${max_attempts} failed"
                  
                  if [ $attempt -lt $max_attempts ]; then
                    echo "‚è≥ Waiting 30 seconds before retry..."
                    sleep 30
                  fi
                  
                  ((attempt++))
                fi
              done
              
              echo "‚ùå ${service_name} health check FAILED after ${max_attempts} attempts"
              echo "üîç Checking container logs for ${service_name}..."
              docker-compose logs --tail 15 "$service_name" 2>/dev/null || echo "Could not retrieve logs for $service_name"
              return 1
            }
            
            # Test all 5 services
            echo "üß™ Testing all 5 AI services..."
            echo "================================="
            
            health_check_failed=false
            
            if ! check_service_health "yolo-combined" 8001; then
              health_check_failed=true
            fi
            echo ""
            
            if ! check_service_health "mmpose" 8003; then
              health_check_failed=true
            fi
            echo ""
            
            if ! check_service_health "yolo-nas" 8004; then
              health_check_failed=true
            fi
            echo ""
            
            if ! check_service_health "rf-detr" 8005; then
              health_check_failed=true
            fi
            echo ""
            
            if ! check_service_health "vitpose" 8006; then
              health_check_failed=true
            fi
            echo ""
            
            # GPU Access Verification
            echo "‚ö° Verifying GPU access and memory..."
            echo "==================================="
            if command -v nvidia-smi >/dev/null 2>&1; then
              echo "üñ•Ô∏è  GPU Status:"
              nvidia-smi --query-gpu=name,memory.total,memory.used --format=csv,noheader,nounits
              echo ""
              
              echo "üê≥ Testing GPU access in containers..."
              for service in yolo-combined mmpose yolo-nas rf-detr vitpose; do
                echo "Testing GPU access in $service..."
                if docker-compose exec -T "$service" nvidia-smi --query-gpu=memory.used --format=csv,noheader,nounits >/dev/null 2>&1; then
                  echo "‚úÖ $service has GPU access"
                else
                  echo "‚ùå $service lacks GPU access"
                  health_check_failed=true
                fi
              done
            else
              echo "‚ö†Ô∏è  nvidia-smi not available"
            fi
            echo ""
            
            # Final health check summary
            echo "üìä HEALTH CHECK SUMMARY"
            echo "======================="
            if [ "$health_check_failed" = true ]; then
              echo "‚ùå Some services failed health checks!"
              exit 1
            else
              echo "‚úÖ ALL 5 SERVICES ARE HEALTHY!"
              echo "üéâ Deployment completed successfully!"
            fi

  deployment-summary:
    name: üìà Deployment Summary
    needs: [deploy-to-vm, health-check]
    runs-on: ubuntu-22.04
    if: always()
    steps:
      - name: üìà Generate Deployment Summary
        run: |
          echo "# üöÄ Smart Deployment Summary Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìä Deployment Status" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy-to-vm.result }}" = "success" ] && [ "${{ needs.health-check.result }}" = "success" ]; then
            echo "‚úÖ **DEPLOYMENT SUCCESSFUL** - All 5 AI services are healthy and operational!" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **DEPLOYMENT FAILED** - Check individual job logs for details" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üîó Service URLs" >> $GITHUB_STEP_SUMMARY
          echo "- **YOLO Combined**: http://${{ secrets.VM_HOST }}:8001/healthz" >> $GITHUB_STEP_SUMMARY
          echo "- **MMPose**: http://${{ secrets.VM_HOST }}:8003/healthz" >> $GITHUB_STEP_SUMMARY
          echo "- **YOLO-NAS**: http://${{ secrets.VM_HOST }}:8004/healthz" >> $GITHUB_STEP_SUMMARY
          echo "- **RF-DETR**: http://${{ secrets.VM_HOST }}:8005/healthz" >> $GITHUB_STEP_SUMMARY
          echo "- **ViTPose**: http://${{ secrets.VM_HOST }}:8006/healthz" >> $GITHUB_STEP_SUMMARY
          echo "- **Load Balancer**: http://${{ secrets.VM_HOST }}:8080/" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üéâ Smart deployment with change detection completed!"
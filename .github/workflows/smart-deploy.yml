name: Smart Deployment
on:
  push:
    branches: [ main, develop, master, docker-containers, feature/*, fix/*, hotfix/* ]
  pull_request:
    branches: [ main, master, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_PREFIX: stevetowers098/nuro-padel

jobs:
  detect-changes:
    runs-on: ubuntu-22.04
    outputs:
      yolo-combined: ${{ steps.changes.outputs.yolo-combined }}
      mmpose: ${{ steps.changes.outputs.mmpose }}
      yolo-nas: ${{ steps.changes.outputs.yolo-nas }}
      nginx: ${{ steps.changes.outputs.nginx }}
      docker-compose: ${{ steps.changes.outputs.docker-compose }}
      docs-only: ${{ steps.changes.outputs.docs-only }}
      dependencies-only: ${{ steps.changes.outputs.dependencies-only }}
      code-changes: ${{ steps.changes.outputs.code-changes }}
      config-changes: ${{ steps.changes.outputs.config-changes }}
      scripts-only: ${{ steps.changes.outputs.scripts-only }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            yolo-combined:
              - 'services/yolo-combined/**'
            mmpose:
              - 'services/mmpose/**'
            yolo-nas:
              - 'services/yolo-nas/**'
            nginx:
              - 'deployment/nginx*.conf'
            docker-compose:
              - 'deployment/docker-compose*.yml'
              - 'Dockerfile*'
            docs-only:
              - '*.md'
              - 'docs/**'
              - 'README*'
              - 'LICENSE*'
              - '.gitignore'
            dependencies-only:
              - 'requirements/**'
              - '**/requirements.txt'
              - '**/package.json'
              - '**/package-lock.json'
            code-changes:
              - '**/*.py'
              - '**/*.js'
              - '**/*.ts'
              - '**/*.jsx'
              - '**/*.tsx'
            config-changes:
              - '**/configs/**'
              - '*.conf'
              - '*.yml'
              - '*.yaml'
              - '*.json'
              - '.env*'
            scripts-only:
              - 'scripts/**'
              - '*.sh'
              - '*.bat'
              - 'deploy*.sh'

  build-yolo-combined:
    name: üöÄ Build YOLO Combined Service
    needs: detect-changes
    if: needs.detect-changes.outputs.yolo-combined == 'true'
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/yolo-combined
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push YOLO Combined image with retry
        run: |
          TAGS="${{ steps.meta.outputs.tags }}"
          LABELS="${{ steps.meta.outputs.labels }}"
          
          BUILD_SUCCESS=false
          for i in 1 2 3; do
            echo "üî® Build attempt $i/3 for YOLO Combined..."
            if docker buildx build \
              --push \
              --cache-from type=gha \
              --cache-to type=gha,mode=max \
              $(echo "$TAGS" | sed 's/^/--tag /' | tr '\n' ' ') \
              $(echo "$LABELS" | sed 's/^/--label /' | tr '\n' ' ') \
              ./services/yolo-combined; then
              echo "‚úÖ Build attempt $i succeeded!"
              BUILD_SUCCESS=true
              break
            else
              echo "‚ùå Build attempt $i failed!"
              if [ $i -eq 3 ]; then
                echo "üö® All 3 build attempts failed for YOLO Combined!"
                exit 1
              fi
              echo "‚è≥ Waiting 30s before retry..."
              sleep 30
            fi
          done
          
          if [ "$BUILD_SUCCESS" != "true" ]; then
            echo "üö® YOLO Combined build failed after all retries"
            exit 1
          fi

  build-mmpose:
    name: ü§∏ Build MMPose Service
    needs: detect-changes
    if: needs.detect-changes.outputs.mmpose == 'true'
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/mmpose
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push MMPose image with retry
        run: |
          TAGS="${{ steps.meta.outputs.tags }}"
          LABELS="${{ steps.meta.outputs.labels }}"
          
          BUILD_SUCCESS=false
          for i in 1 2 3; do
            echo "üî® Build attempt $i/3 for MMPose..."
            if docker buildx build \
              --push \
              --cache-from type=gha \
              --cache-to type=gha,mode=max \
              $(echo "$TAGS" | sed 's/^/--tag /' | tr '\n' ' ') \
              $(echo "$LABELS" | sed 's/^/--label /' | tr '\n' ' ') \
              ./services/mmpose; then
              echo "‚úÖ Build attempt $i succeeded!"
              BUILD_SUCCESS=true
              break
            else
              echo "‚ùå Build attempt $i failed!"
              if [ $i -eq 3 ]; then
                echo "üö® All 3 build attempts failed for MMPose!"
                exit 1
              fi
              echo "‚è≥ Waiting 30s before retry..."
              sleep 30
            fi
          done
          
          if [ "$BUILD_SUCCESS" != "true" ]; then
            echo "üö® MMPose build failed after all retries"
            exit 1
          fi

  build-yolo-nas:
    name: üéØ Build YOLO-NAS Service
    needs: detect-changes
    if: needs.detect-changes.outputs.yolo-nas == 'true'
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/yolo-nas
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push YOLO-NAS image with retry
        run: |
          TAGS="${{ steps.meta.outputs.tags }}"
          LABELS="${{ steps.meta.outputs.labels }}"
          
          BUILD_SUCCESS=false
          for i in 1 2 3; do
            echo "üî® Build attempt $i/3 for YOLO-NAS..."
            if docker buildx build \
              --push \
              --cache-from type=gha \
              --cache-to type=gha,mode=max \
              $(echo "$TAGS" | sed 's/^/--tag /' | tr '\n' ' ') \
              $(echo "$LABELS" | sed 's/^/--label /' | tr '\n' ' ') \
              ./services/yolo-nas; then
              echo "‚úÖ Build attempt $i succeeded!"
              BUILD_SUCCESS=true
              break
            else
              echo "‚ùå Build attempt $i failed!"
              if [ $i -eq 3 ]; then
                echo "üö® All 3 build attempts failed for YOLO-NAS!"
                exit 1
              fi
              echo "‚è≥ Waiting 30s before retry..."
              sleep 30
            fi
          done
          
          if [ "$BUILD_SUCCESS" != "true" ]; then
            echo "üö® YOLO-NAS build failed after all retries"
            exit 1
          fi

  summary:
    name: üìä Build Summary (NOT ACTUAL DEPLOYMENT)
    needs: [detect-changes, build-yolo-combined, build-mmpose, build-yolo-nas]
    if: always()
    runs-on: ubuntu-22.04
    steps:
      - name: Check for build failures
        run: |
          echo "üîç Checking build results..."
          
          # Check if any builds actually failed
          YOLO_COMBINED_RESULT="${{ needs.build-yolo-combined.result }}"
          MMPOSE_RESULT="${{ needs.build-mmpose.result }}"
          YOLO_NAS_RESULT="${{ needs.build-yolo-nas.result }}"
          
          echo "Build Results:"
          echo "  üöÄ YOLO Combined: $YOLO_COMBINED_RESULT"
          echo "  ü§∏ MMPose: $MMPOSE_RESULT"
          echo "  üéØ YOLO-NAS: $YOLO_NAS_RESULT"
          
          # Fail if any build actually failed (not skipped)
          if [[ "$YOLO_COMBINED_RESULT" == "failure" ]] || [[ "$MMPOSE_RESULT" == "failure" ]] || [[ "$YOLO_NAS_RESULT" == "failure" ]]; then
            echo ""
            echo "üö® ERROR: One or more builds FAILED!"
            echo "‚ùå This workflow should be marked as FAILED, not SUCCESS"
            echo "‚ö†Ô∏è  WARNING: This is only a summary - NO ACTUAL DEPLOYMENT occurred!"
            exit 1
          fi
          
      - name: üìä Build Summary & Analytics
        run: |
          echo ""
          echo "‚ö†Ô∏è  IMPORTANT: This is NOT an actual deployment!"
          echo "‚ö†Ô∏è  This workflow only builds Docker images."
          echo "‚ö†Ô∏è  No services were deployed to any environment."
          echo ""
          echo "üöÄ Smart Build Summary"
          echo "=============================================="
          
          # Service-level changes with emojis
          echo "üì¶ Service Changes:"
          echo "  üöÄ YOLO Combined: ${{ needs.detect-changes.outputs.yolo-combined == 'true' && '‚úÖ Built & Updated' || '‚è≠Ô∏è Skipped - No Changes' }}"
          echo "  ü§∏ MMPose: ${{ needs.detect-changes.outputs.mmpose == 'true' && '‚úÖ Built & Updated' || '‚è≠Ô∏è Skipped - No Changes' }}"
          echo "  üéØ YOLO-NAS: ${{ needs.detect-changes.outputs.yolo-nas == 'true' && '‚úÖ Built & Updated' || '‚è≠Ô∏è Skipped - No Changes' }}"
          echo "  üåê Nginx: ${{ needs.detect-changes.outputs.nginx == 'true' && '‚öôÔ∏è Configuration Updated' || '‚è≠Ô∏è No Changes' }}"
          echo "  üê≥ Docker Compose: ${{ needs.detect-changes.outputs.docker-compose == 'true' && '‚öôÔ∏è Configuration Updated' || '‚è≠Ô∏è No Changes' }}"
          
          # Enhanced granular change analysis
          echo ""
          echo "üîç Intelligent Change Detection:"
          echo "  üìö Documentation Only: ${{ needs.detect-changes.outputs.docs-only == 'true' && 'üéâ Yes - Ultra Fast Deploy!' || '‚ùå No' }}"
          echo "  üì¶ Dependencies Only: ${{ needs.detect-changes.outputs.dependencies-only == 'true' && 'üîÑ Yes - Package Changes' || '‚ùå No' }}"
          echo "  üíª Code Changes: ${{ needs.detect-changes.outputs.code-changes == 'true' && 'üõ†Ô∏è Yes - Logic Updates' || '‚ùå No' }}"
          echo "  ‚öôÔ∏è Config Changes: ${{ needs.detect-changes.outputs.config-changes == 'true' && 'üîß Yes - Configuration Updates' || '‚ùå No' }}"
          echo "  üìú Scripts Only: ${{ needs.detect-changes.outputs.scripts-only == 'true' && 'üõ†Ô∏è Yes - Utility Scripts' || '‚ùå No' }}"
          
          # Smart time calculation with enhanced logic
          total_services=3
          changed_services=$(( ${{ needs.detect-changes.outputs.yolo-combined == 'true' && 1 || 0 }} + ${{ needs.detect-changes.outputs.mmpose == 'true' && 1 || 0 }} + ${{ needs.detect-changes.outputs.yolo-nas == 'true' && 1 || 0 }} ))
          skipped_services=$((total_services - changed_services))
          
          # Enhanced time savings based on change type
          if [[ "${{ needs.detect-changes.outputs.docs-only }}" == "true" && $changed_services -eq 0 ]]; then
            time_saved=$((total_services * 12))  # Docs only = skip all builds
            echo ""
            echo "üöÄ Super Fast Deploy: Documentation-only changes detected!"
            echo "‚ö° All builds skipped automatically!"
          elif [[ "${{ needs.detect-changes.outputs.scripts-only }}" == "true" && $changed_services -eq 0 ]]; then
            time_saved=$((total_services * 12))  # Scripts only = skip all builds
            echo ""
            echo "üõ†Ô∏è Script-only changes detected - No Docker rebuilds needed!"
          elif [[ "${{ needs.detect-changes.outputs.config-changes }}" == "true" && $changed_services -eq 0 ]]; then
            time_saved=$((total_services * 10))  # Config only = skip all builds
            echo ""
            echo "‚öôÔ∏è Configuration-only changes - Smart skip enabled!"
          else
            time_saved=$((skipped_services * 12))  # Standard service skipping
            if [[ $changed_services -eq 0 ]]; then
              echo ""
              echo "üéâ No service changes detected - Full optimization!"
            fi
          fi
          
          # Comprehensive summary
          echo ""
          echo "üìà Performance Analytics:"
          echo "  ‚è±Ô∏è  Services rebuilt: $changed_services/$total_services"
          echo "  ‚ö° Time saved: ${time_saved} minutes"
          echo "  üéØ Build efficiency: $((100 - (changed_services * 100 / total_services)))% skipped"
          echo "  üí∞ Resource optimization: $((skipped_services * 100 / total_services))% compute saved"
          
          if [[ $time_saved -gt 20 ]]; then
            echo "  üèÜ Excellent optimization achieved!"
          elif [[ $time_saved -gt 10 ]]; then
            echo "  üëç Good optimization achieved!"
          else
            echo "  üîÑ Standard deployment completed!"
          fi
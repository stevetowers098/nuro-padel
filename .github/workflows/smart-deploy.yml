name: Smart Deployment
on:
  push:
    branches: [ main, develop, master, docker-containers, feature/*, fix/*, hotfix/* ]
  pull_request:
    branches: [ main, master, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_PREFIX: stevetowers098/nuro-padel

jobs:
  detect-changes:
    runs-on: ubuntu-22.04
    outputs:
      yolo-combined: ${{ steps.changes.outputs.yolo-combined }}
      mmpose: ${{ steps.changes.outputs.mmpose }}
      yolo-nas: ${{ steps.changes.outputs.yolo-nas }}
      nginx: ${{ steps.changes.outputs.nginx }}
      docker-compose: ${{ steps.changes.outputs.docker-compose }}
      docs-only: ${{ steps.changes.outputs.docs-only }}
      dependencies-only: ${{ steps.changes.outputs.dependencies-only }}
      code-changes: ${{ steps.changes.outputs.code-changes }}
      config-changes: ${{ steps.changes.outputs.config-changes }}
      scripts-only: ${{ steps.changes.outputs.scripts-only }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            yolo-combined:
              - 'services/yolo-combined/**'
            mmpose:
              - 'services/mmpose/**'
            yolo-nas:
              - 'services/yolo-nas/**'
            nginx:
              - 'deployment/nginx*.conf'
            docker-compose:
              - 'deployment/docker-compose*.yml'
              - 'Dockerfile*'
            docs-only:
              - '*.md'
              - 'docs/**'
              - 'README*'
              - 'LICENSE*'
              - '.gitignore'
            dependencies-only:
              - 'requirements/**'
              - '**/requirements.txt'
              - '**/package.json'
              - '**/package-lock.json'
            code-changes:
              - '**/*.py'
              - '**/*.js'
              - '**/*.ts'
              - '**/*.jsx'
              - '**/*.tsx'
            config-changes:
              - '**/configs/**'
              - '*.conf'
              - '*.yml'
              - '*.yaml'
              - '*.json'
              - '.env*'
            scripts-only:
              - 'scripts/**'
              - '*.sh'
              - '*.bat'
              - 'deploy*.sh'

  build-yolo-combined:
    name: 🚀 Build YOLO Combined Service
    needs: detect-changes
    if: needs.detect-changes.outputs.yolo-combined == 'true'
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/yolo-combined
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push YOLO Combined image
        uses: docker/build-push-action@v5
        with:
          context: ./services/yolo-combined
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-mmpose:
    name: 🤸 Build MMPose Service
    needs: detect-changes
    if: needs.detect-changes.outputs.mmpose == 'true'
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/mmpose
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push MMPose image
        uses: docker/build-push-action@v5
        with:
          context: ./services/mmpose
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-yolo-nas:
    name: 🎯 Build YOLO-NAS Service
    needs: detect-changes
    if: needs.detect-changes.outputs.yolo-nas == 'true'
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/yolo-nas
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push YOLO-NAS image
        uses: docker/build-push-action@v5
        with:
          context: ./services/yolo-nas
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: 🎯 Smart Deployment Summary
    needs: [detect-changes, build-yolo-combined, build-mmpose, build-yolo-nas]
    if: always() && (needs.build-yolo-combined.result == 'success' || needs.build-yolo-combined.result == 'skipped') && (needs.build-mmpose.result == 'success' || needs.build-mmpose.result == 'skipped') && (needs.build-yolo-nas.result == 'success' || needs.build-yolo-nas.result == 'skipped')
    runs-on: ubuntu-22.04
    steps:
      - name: 📊 Deployment Summary & Analytics
        run: |
          echo "🚀 Smart Deployment Summary"
          echo "=============================================="
          
          # Service-level changes with emojis
          echo "📦 Service Changes:"
          echo "  🚀 YOLO Combined: ${{ needs.detect-changes.outputs.yolo-combined == 'true' && '✅ Built & Updated' || '⏭️ Skipped - No Changes' }}"
          echo "  🤸 MMPose: ${{ needs.detect-changes.outputs.mmpose == 'true' && '✅ Built & Updated' || '⏭️ Skipped - No Changes' }}"
          echo "  🎯 YOLO-NAS: ${{ needs.detect-changes.outputs.yolo-nas == 'true' && '✅ Built & Updated' || '⏭️ Skipped - No Changes' }}"
          echo "  🌐 Nginx: ${{ needs.detect-changes.outputs.nginx == 'true' && '⚙️ Configuration Updated' || '⏭️ No Changes' }}"
          echo "  🐳 Docker Compose: ${{ needs.detect-changes.outputs.docker-compose == 'true' && '⚙️ Configuration Updated' || '⏭️ No Changes' }}"
          
          # Enhanced granular change analysis
          echo ""
          echo "🔍 Intelligent Change Detection:"
          echo "  📚 Documentation Only: ${{ needs.detect-changes.outputs.docs-only == 'true' && '🎉 Yes - Ultra Fast Deploy!' || '❌ No' }}"
          echo "  📦 Dependencies Only: ${{ needs.detect-changes.outputs.dependencies-only == 'true' && '🔄 Yes - Package Changes' || '❌ No' }}"
          echo "  💻 Code Changes: ${{ needs.detect-changes.outputs.code-changes == 'true' && '🛠️ Yes - Logic Updates' || '❌ No' }}"
          echo "  ⚙️ Config Changes: ${{ needs.detect-changes.outputs.config-changes == 'true' && '🔧 Yes - Configuration Updates' || '❌ No' }}"
          echo "  📜 Scripts Only: ${{ needs.detect-changes.outputs.scripts-only == 'true' && '🛠️ Yes - Utility Scripts' || '❌ No' }}"
          
          # Smart time calculation with enhanced logic
          total_services=3
          changed_services=$(( ${{ needs.detect-changes.outputs.yolo-combined == 'true' && 1 || 0 }} + ${{ needs.detect-changes.outputs.mmpose == 'true' && 1 || 0 }} + ${{ needs.detect-changes.outputs.yolo-nas == 'true' && 1 || 0 }} ))
          skipped_services=$((total_services - changed_services))
          
          # Enhanced time savings based on change type
          if [[ "${{ needs.detect-changes.outputs.docs-only }}" == "true" && $changed_services -eq 0 ]]; then
            time_saved=$((total_services * 12))  # Docs only = skip all builds
            echo ""
            echo "🚀 Super Fast Deploy: Documentation-only changes detected!"
            echo "⚡ All builds skipped automatically!"
          elif [[ "${{ needs.detect-changes.outputs.scripts-only }}" == "true" && $changed_services -eq 0 ]]; then
            time_saved=$((total_services * 12))  # Scripts only = skip all builds
            echo ""
            echo "🛠️ Script-only changes detected - No Docker rebuilds needed!"
          elif [[ "${{ needs.detect-changes.outputs.config-changes }}" == "true" && $changed_services -eq 0 ]]; then
            time_saved=$((total_services * 10))  # Config only = skip all builds
            echo ""
            echo "⚙️ Configuration-only changes - Smart skip enabled!"
          else
            time_saved=$((skipped_services * 12))  # Standard service skipping
            if [[ $changed_services -eq 0 ]]; then
              echo ""
              echo "🎉 No service changes detected - Full optimization!"
            fi
          fi
          
          # Comprehensive summary
          echo ""
          echo "📈 Performance Analytics:"
          echo "  ⏱️  Services rebuilt: $changed_services/$total_services"
          echo "  ⚡ Time saved: ${time_saved} minutes"
          echo "  🎯 Build efficiency: $((100 - (changed_services * 100 / total_services)))% skipped"
          echo "  💰 Resource optimization: $((skipped_services * 100 / total_services))% compute saved"
          
          if [[ $time_saved -gt 20 ]]; then
            echo "  🏆 Excellent optimization achieved!"
          elif [[ $time_saved -gt 10 ]]; then
            echo "  👍 Good optimization achieved!"
          else
            echo "  🔄 Standard deployment completed!"
          fi
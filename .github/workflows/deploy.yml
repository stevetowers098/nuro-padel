name: Deploy NuroPadel to VM
on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1

    - name: Start VM Instance if Stopped
      run: |
        echo "Checking VM instance status..."
        STATUS=$(gcloud compute instances describe padel-ai --zone=australia-southeast1-a --project=surf-coach --format="value(status)" 2>/dev/null || echo "ERROR")
        echo "Current VM status: $STATUS"
        if [ "$STATUS" = "TERMINATED" ] || [ "$STATUS" = "STOPPED" ]; then
          echo "VM is stopped. Starting instance..."
          gcloud compute instances start padel-ai --zone=australia-southeast1-a --project=surf-coach
          echo "Waiting for VM to boot..."
          sleep 90
          echo "Testing SSH connection..."
          for i in {1..20}; do
            if timeout 15 gcloud compute ssh padel-ai --zone=australia-southeast1-a --project=surf-coach --command="echo 'SSH Ready'" --ssh-flag="-o ConnectTimeout=10" --ssh-flag="-o StrictHostKeyChecking=no" 2>/dev/null; then
              echo "SSH connection ready!"
              break
            fi
            echo "SSH attempt $i/20..."
            sleep 15
          done
        elif [ "$STATUS" = "RUNNING" ]; then
          echo "VM is already running"
        else
          echo "Unknown VM status: $STATUS, attempting to start..."
          gcloud compute instances start padel-ai --zone=australia-southeast1-a --project=surf-coach || true
          sleep 60
        fi

    - name: Test SSH Connectivity (Direct)
      id: ssh_test
      continue-on-error: true
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.VM_HOST }}
        username: Towers
        key: ${{ secrets.VM_SSH_KEY }}
        timeout: 30s
        command_timeout: 15s
        debug: true
        script: |
          echo "=== SSH Connection Test ==="
          echo "User: $(whoami)"
          echo "Host: $(hostname)"
          echo "Date: $(date)"
          echo "=== Connection Successful ==="

    - name: SSH Key Diagnosis
      if: steps.ssh_test.outcome == 'failure'
      run: |
        echo "❌ Direct SSH failed. Diagnosing SSH key issues..."
        echo "🔍 VM_SSH_KEY first/last lines check:"
        echo "First line: $(echo '${{ secrets.VM_SSH_KEY }}' | head -1)"
        echo "Last line: $(echo '${{ secrets.VM_SSH_KEY }}' | tail -1)"
        echo "Key length: $(echo '${{ secrets.VM_SSH_KEY }}' | wc -c) characters"
        echo ""
        echo "💡 Common issues:"
        echo "1. VM_SSH_KEY should start with '-----BEGIN OPENSSH PRIVATE KEY-----'"
        echo "2. VM_SSH_KEY should end with '-----END OPENSSH PRIVATE KEY-----'"
        echo "3. Public key might not be in /home/Towers/.ssh/authorized_keys on VM"
        echo "4. File permissions might be wrong on VM"
        echo ""
        echo "📋 Next steps:"
        echo "1. Check GitHub secrets VM_SSH_KEY format"
        echo "2. Verify public key is on VM: cat ~/.ssh/authorized_keys"
        echo "3. Fix permissions: chmod 700 ~/.ssh && chmod 600 ~/.ssh/authorized_keys"

    - name: Fallback - Test with gcloud SSH
      if: steps.ssh_test.outcome == 'failure'
      run: |
        echo "🔄 Attempting fallback gcloud SSH connection..."
        gcloud compute ssh padel-ai \
          --zone=australia-southeast1-a \
          --project=surf-coach \
          --ssh-flag="-o ConnectTimeout=10" \
          --ssh-flag="-o StrictHostKeyChecking=no" \
          --command="echo '✅ gcloud SSH works! VM is accessible via GCP SSH keys'"

    - name: Prepare VM for Deployment
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.VM_HOST }}
        username: Towers
        key: ${{ secrets.VM_SSH_KEY }}
        timeout: 120s
        command_timeout: 120s
        debug: true
        script: |
          set -e
          echo "Stopping existing services..."
          # Stop all current services (including combined-service)
          sudo systemctl stop padel-api combined-service yolo11-service yolov8-service mmpose-service yolo-nas-service 2>/dev/null || true
          echo "Creating base directories..."
          sudo mkdir -p /opt/padel/{app,shared,yolo,mmpose,yolo-nas}
          sudo mkdir -p /opt/padel/app/{configs/body_2d_keypoint/rtmpose/coco,weights,scripts,uploads,processed}
          sudo chown -R Towers:Towers /opt/padel
          echo "Preserving model weights..."
          if [ -d "/opt/padel/app/weights" ]; then
            cp -r /opt/padel/app/weights /tmp/weights_backup
            echo "Model weights backed up"
          fi
          echo "Cleaning old code..."
          find /opt/padel/app -maxdepth 1 -type f -delete
          find /opt/padel/app -maxdepth 1 -mindepth 1 -type d ! -name weights ! -name uploads ! -name processed -exec rm -rf {} + 2>/dev/null || true
          echo "VM prepared for code transfer"

    - name: Smart Code Update
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.VM_HOST }}
        username: Towers
        key: ${{ secrets.VM_SSH_KEY }}
        timeout: 180s
        command_timeout: 180s
        debug: true
        script: |
          set -e
          echo "📋 Checking if requirements changed..."
          cd /opt/padel
          curl -sL https://github.com/stevetowers098/nuro-padel/archive/refs/heads/main.tar.gz | tar -xz
          REBUILD_VENVS=false
          if [ ! -f "requirements.txt" ] || ! diff -q nuro-padel-main/requirements.txt requirements.txt >/dev/null 2>&1; then
            echo "🔄 Main requirements changed - need to rebuild shared venv"
            REBUILD_VENVS=true
          fi
          if [ ! -d "requirements" ] || ! diff -q -r nuro-padel-main/requirements/ requirements/ >/dev/null 2>&1; then
            echo "🔄 Service requirements changed - need to rebuild service venvs"
            REBUILD_VENVS=true
          fi
          
          echo "📦 Copying new code..."
          cp -r nuro-padel-main/* app/
          rm -rf nuro-padel-main
          
          echo "📄 Updating requirements files..."
          cp -r app/requirements /opt/padel/ 2>/dev/null || echo "⚠️ No requirements directory"
          cp app/requirements.txt /opt/padel/ 2>/dev/null || echo "⚠️ No requirements.txt"
          
          echo "🔄 Preserving manually managed weights..."
          if [ -d "/tmp/weights_backup" ]; then
            cp -r /tmp/weights_backup/* app/weights/ 2>/dev/null || true
            rm -rf /tmp/weights_backup
            echo "✅ Model weights restored"
          else
            echo "⚠️ No weights backup found - weights must be manually uploaded"
            mkdir -p app/weights
          fi
          
          echo "REBUILD_VENVS=$REBUILD_VENVS"
          echo "🎯 Smart code update complete!"

    - name: Setup Virtual Environments
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.VM_HOST }}
        username: Towers
        key: ${{ secrets.VM_SSH_KEY }}
        timeout: 1200s
        command_timeout: 1200s
        debug: true
        script: |
          set -e
          setup_venv() {
            local venv_path=$1
            local venv_name=$2
            local req_file=$3
            echo "🔧 Setting up $venv_name environment..."
            cd $venv_path
            if [ -d "venv" ]; then
              rm -rf venv
            fi
            python3.10 -m venv venv
            source venv/bin/activate
            pip install --upgrade pip setuptools wheel --quiet --no-cache-dir
            if [ -f "$req_file" ]; then
              pip install -r "$req_file" --quiet --no-cache-dir
            else
              echo "⚠️ $req_file not found, using fallback packages"
              case $venv_name in
                "shared")
                  pip install fastapi==0.104.1 uvicorn==0.24.0 pydantic==2.5.0 httpx python-multipart google-cloud-storage google-cloud-compute --quiet --no-cache-dir
                  ;;
                "yolo")
                  pip install fastapi==0.104.1 pydantic==2.5.0 ultralytics torch torchvision --quiet --no-cache-dir
                  ;;
                "yolo-nas")
                  pip install fastapi==0.104.1 pydantic==2.5.0 super-gradients torch==1.13 --quiet --no-cache-dir
                  ;;
              esac
            fi
            deactivate
            echo "✅ $venv_name environment ready"
          }
          
          echo "🏗️ Setting up virtual environments..."
          setup_venv "/opt/padel/shared" "shared" "/opt/padel/requirements.txt"
          setup_venv "/opt/padel/yolo" "yolo" "/opt/padel/requirements/yolo.txt"
          setup_venv "/opt/padel/yolo-nas" "yolo-nas" "/opt/padel/requirements/yolo-nas.txt"
          
          echo "🔧 Setting up MMPose environment..."
          cd /opt/padel/mmpose
          if [ -d "venv" ]; then rm -rf venv; fi
          python3.10 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip setuptools==60.2.0 --quiet --no-cache-dir
          pip uninstall openxlab torch torchvision torchaudio triton -y --quiet 2>/dev/null || true
          pip install torch==2.0.1 torchvision==0.15.2 torchaudio==2.0.2 --index-url https://download.pytorch.org/whl/cu118 --quiet --no-cache-dir
          pip install openmim --quiet --no-cache-dir
          mim install "mmpose>=1.0.0"
          mim install "mmcv>=2.0.1"
          if [ -f "/opt/padel/requirements/mmpose.txt" ]; then
            pip install -r /opt/padel/requirements/mmpose.txt --quiet --no-cache-dir
          else
            pip install fastapi==0.104.1 pydantic==2.5.0 mmpose==1.0.0 --quiet --no-cache-dir
          fi
          deactivate
          echo "✅ All environments ready"

    - name: Configure and Start Services
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.VM_HOST }}
        username: Towers
        key: ${{ secrets.VM_SSH_KEY }}
        timeout: 600s
        command_timeout: 600s
        debug: true
        script: |
          set -e
          check_service_health() {
            local port=$1
            local service_name=$2
            local max_retries=20
            local retry_count=0
            while [ $retry_count -lt $max_retries ]; do
              if curl -s -f --max-time 5 http://localhost:$port/healthz > /dev/null 2>&1; then
                echo "✅ $service_name (port $port): healthy"
                return 0
              fi
              retry_count=$((retry_count + 1))
              echo "⏳ Waiting for $service_name (attempt $retry_count/$max_retries)..."
              sleep 3
            done
            echo "❌ $service_name (port $port): failed health check"
            sudo journalctl -u $service_name -n 5 --no-pager || true
            return 1
          }
          
          echo "🔄 Reloading systemd and starting services..."
          sudo systemctl daemon-reload
          ACTIVE_SERVICES="padel-api yolo11-service yolov8-service mmpose-service yolo-nas-service"
          for service in $ACTIVE_SERVICES; do
            echo "Starting $service..."
            sudo systemctl enable $service
            sudo systemctl restart $service
            sleep 5
          done
          
          echo "⏳ Waiting for services to initialize (45 seconds)..."
          sleep 45
          
          echo "🏥 Running health checks..."
          FAILED_SERVICES=0
          check_service_health 8000 "padel-api" || FAILED_SERVICES=$((FAILED_SERVICES + 1))
          check_service_health 8001 "yolo11-service" || FAILED_SERVICES=$((FAILED_SERVICES + 1))
          check_service_health 8002 "yolov8-service" || FAILED_SERVICES=$((FAILED_SERVICES + 1))
          check_service_health 8003 "mmpose-service" || FAILED_SERVICES=$((FAILED_SERVICES + 1))
          check_service_health 8004 "yolo-nas-service" || FAILED_SERVICES=$((FAILED_SERVICES + 1))
          
          echo "📊 Final service status:"
          for service in $ACTIVE_SERVICES; do
            status=$(systemctl is-active $service)
            echo "  $service: $status"
          done
          
          if [ $FAILED_SERVICES -gt 0 ]; then
            echo "⚠️ $FAILED_SERVICES service(s) failed health checks"
            echo "Check logs with: sudo journalctl -u <service-name> -f"
          else
            echo "🎉 All services healthy! Deployment successful!"
          fi
          
          echo "🎯 Deployment complete!"

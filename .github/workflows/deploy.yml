name: 🚀 CI & Deploy to VM

on:
  push:
    branches: [main]
  workflow_dispatch:  # Allow manual triggering

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: stevetowers098/nuro-padel

jobs:
  build-and-push:
    name: 🔨 Build & Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      build-time: ${{ steps.build-info.outputs.build-time }}
      image-tags: ${{ steps.build-info.outputs.image-tags }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🛠️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 📊 Build Info
        id: build-info
        run: |
          echo "build-time=$(date -u +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
          echo "image-tags=${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "🔍 Building images with tag: ${{ github.sha }}"

      - name: 🤖 Build and push yolo-combined
        uses: docker/build-push-action@v5
        with:
          context: ./services/yolo-combined
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/yolo-combined:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/yolo-combined:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🦴 Build and push mmpose
        uses: docker/build-push-action@v5
        with:
          context: ./services/mmpose
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/mmpose:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/mmpose:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🎯 Build and push yolo-nas
        uses: docker/build-push-action@v5
        with:
          context: ./services/yolo-nas
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/yolo-nas:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/yolo-nas:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: ✅ Build Summary
        run: |
          echo "🎉 Successfully built and pushed all Docker images!"
          echo "📦 Images pushed to: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          echo "🏷️ Tags: latest, ${{ github.sha }}"
          echo "⏰ Build completed at: $(date -u)"

  deploy-to-vm:
    name: 🚀 Deploy to Production VM
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: 📋 Pre-deployment Info
        run: |
          echo "🎯 Deploying to VM: ${{ secrets.VM_IP }}"
          echo "📦 Using images from build: ${{ needs.build-and-push.outputs.image-tags }}"
          echo "⏰ Build time: ${{ needs.build-and-push.outputs.build-time }}"
          echo "🔄 Starting SSH deployment..."

      - name: 🔗 Deploy to VM via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_IP }}
          username: Towers
          key: ${{ secrets.VM_SSH_KEY }}
          script: |
            echo "🚀 Starting deployment on VM..."
            echo "📍 VM: $(hostname) - $(whoami)@$(hostname -I | awk '{print $1}')"
            echo "⏰ Deployment started at: $(date)"
            echo ""
            
            # Navigate to project directory
            echo "📂 Navigating to project directory..."
            cd /opt/padel-docker || {
              echo "❌ Error: Could not navigate to /opt/padel-docker"
              exit 1
            }
            
            echo "✅ Current directory: $(pwd)"
            echo "📋 Directory contents:"
            ls -la
            echo ""
            
            # Make deploy script executable
            echo "🔧 Making deploy script executable..."
            chmod +x scripts/deploy.sh
            
            # Run the deployment
            echo "🚀 Running deployment script..."
            echo "================================================"
            ./scripts/deploy.sh --vm
            echo "================================================"
            
            # Check if deployment was successful
            if [ $? -eq 0 ]; then
              echo "✅ Deployment script completed successfully!"
            else
              echo "❌ Deployment script failed!"
              exit 1
            fi

  health-check:
    name: 🏥 Health Check & Validation
    needs: [build-and-push, deploy-to-vm]
    runs-on: ubuntu-latest
    steps:
      - name: ⏳ Wait for services to stabilize
        run: |
          echo "⏳ Waiting 90 seconds for services to fully start and stabilize..."
          echo "🔄 This ensures all containers are ready before health checks"
          sleep 90
          echo "✅ Wait period completed"

      - name: 🏥 Comprehensive Health Check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_IP }}
          username: Towers
          key: ${{ secrets.VM_SSH_KEY }}
          script: |
            echo "🏥 Starting comprehensive health checks..."
            echo "⏰ Health check started at: $(date)"
            echo ""
            
            cd /opt/padel-docker
            
            # Check Docker containers status
            echo "🐳 Docker Container Status:"
            echo "================================"
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            echo ""
            
            # Check Docker Compose services
            echo "📋 Docker Compose Service Status:"
            echo "======================================"
            cd deployment
            docker-compose ps
            echo ""
            
            # Health check function
            check_service_health() {
              local service_name=$1
              local port=$2
              local endpoint="http://localhost:${port}/healthz"
              
              echo "🔍 Testing ${service_name} on port ${port}..."
              
              # Try health check with timeout
              if timeout 30 curl -f -s "$endpoint" > /dev/null 2>&1; then
                echo "✅ ${service_name} health check PASSED"
                
                # Get additional service info
                local response=$(curl -s "$endpoint" 2>/dev/null || echo "No response")
                echo "📊 ${service_name} response: $response"
                return 0
              else
                echo "❌ ${service_name} health check FAILED"
                echo "🔍 Checking ${service_name} logs..."
                docker-compose logs --tail 10 "$service_name" || echo "Could not retrieve logs"
                return 1
              fi
            }
            
            # Test all services
            echo "🧪 Testing individual services..."
            echo "================================="
            
            health_check_failed=false
            
            # Test YOLO Combined
            if ! check_service_health "yolo-combined" 8001; then
              health_check_failed=true
            fi
            echo ""
            
            # Test MMPose
            if ! check_service_health "mmpose" 8003; then
              health_check_failed=true
            fi
            echo ""
            
            # Test YOLO-NAS
            if ! check_service_health "yolo-nas" 8004; then
              health_check_failed=true
            fi
            echo ""
            
            # Test Load Balancer
            echo "🔍 Testing load balancer on port 8080..."
            if timeout 30 curl -f -s "http://localhost:8080" > /dev/null 2>&1; then
              echo "✅ Load balancer health check PASSED"
            else
              echo "❌ Load balancer health check FAILED"
              health_check_failed=true
            fi
            echo ""
            
            # Final health check summary
            echo "📊 HEALTH CHECK SUMMARY"
            echo "======================="
            if [ "$health_check_failed" = true ]; then
              echo "❌ Some services failed health checks!"
              echo "🔍 Check the logs above for details"
              exit 1
            else
              echo "✅ ALL SERVICES ARE HEALTHY!"
              echo "🎉 Deployment completed successfully!"
            fi

  integration-tests:
    name: 🧪 Integration Tests
    needs: [build-and-push, deploy-to-vm, health-check]
    runs-on: ubuntu-latest
    steps:
      - name: 🧪 Run Integration Tests
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_IP }}
          username: Towers
          key: ${{ secrets.VM_SSH_KEY }}
          script: |
            echo "🧪 Starting integration tests..."
            echo "⏰ Tests started at: $(date)"
            echo ""
            
            cd /opt/padel-docker
            
            # Test service endpoints with sample data
            echo "🎯 Testing service endpoints..."
            echo "=============================="
            
            # Function to test service endpoint
            test_service_endpoint() {
              local service_name=$1
              local port=$2
              local test_description=$3
              
              echo "🔍 Testing ${service_name}: ${test_description}"
              
              # Test health endpoint
              local health_url="http://localhost:${port}/healthz"
              if curl -f -s "$health_url" > /dev/null; then
                echo "✅ ${service_name} health endpoint working"
              else
                echo "❌ ${service_name} health endpoint failed"
                return 1
              fi
              
              # Test if service responds to basic requests
              local info_url="http://localhost:${port}/"
              if curl -f -s -o /dev/null "$info_url"; then
                echo "✅ ${service_name} main endpoint responsive"
              else
                echo "⚠️  ${service_name} main endpoint check inconclusive"
              fi
              
              echo ""
            }
            
            # Test all services
            test_service_endpoint "yolo-combined" 8001 "YOLO object detection service"
            test_service_endpoint "mmpose" 8003 "MMPose pose estimation service" 
            test_service_endpoint "yolo-nas" 8004 "YOLO-NAS advanced detection service"
            
            # Test load balancer
            echo "🔍 Testing load balancer functionality..."
            if curl -f -s "http://localhost:8080" > /dev/null; then
              echo "✅ Load balancer is distributing traffic"
            else
              echo "❌ Load balancer test failed"
              exit 1
            fi
            echo ""
            
            # System resource check
            echo "📊 System Resource Usage:"
            echo "========================"
            echo "💾 Memory Usage:"
            free -h
            echo ""
            echo "💽 Disk Usage:"
            df -h | head -5
            echo ""
            echo "🖥️  CPU Usage:"
            top -bn1 | head -5
            echo ""
            
            # Docker resource usage
            echo "🐳 Docker Resource Usage:"
            echo "========================="
            docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}"
            echo ""
            
            echo "🎉 All integration tests completed successfully!"
            echo "✅ Deployment is fully operational!"

  deployment-summary:
    name: 📈 Deployment Summary
    needs: [build-and-push, deploy-to-vm, health-check, integration-tests]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: 📈 Generate Deployment Summary
        run: |
          echo "# 🚀 Deployment Summary Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Deployment Status" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-and-push.result }}" = "success" ] && \
             [ "${{ needs.deploy-to-vm.result }}" = "success" ] && \
             [ "${{ needs.health-check.result }}" = "success" ] && \
             [ "${{ needs.integration-tests.result }}" = "success" ]; then
            echo "✅ **DEPLOYMENT SUCCESSFUL** - All services are healthy and operational!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **DEPLOYMENT FAILED** - Check individual job logs for details" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔍 Job Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status | Duration |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🔨 Build & Push | ${{ needs.build-and-push.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| 🚀 Deploy to VM | ${{ needs.deploy-to-vm.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| 🏥 Health Check | ${{ needs.health-check.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| 🧪 Integration Tests | ${{ needs.integration-tests.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔗 Service URLs" >> $GITHUB_STEP_SUMMARY
          echo "- **YOLO Combined**: http://${{ secrets.VM_IP }}:8001/healthz" >> $GITHUB_STEP_SUMMARY
          echo "- **MMPose**: http://${{ secrets.VM_IP }}:8003/healthz" >> $GITHUB_STEP_SUMMARY
          echo "- **YOLO-NAS**: http://${{ secrets.VM_IP }}:8004/healthz" >> $GITHUB_STEP_SUMMARY
          echo "- **Load Balancer**: http://${{ secrets.VM_IP }}:8080/" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📦 Images Built" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry**: ghcr.io/stevetowers098/nuro-padel" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Time**: ${{ needs.build-and-push.outputs.build-time }}" >> $GITHUB_STEP_SUMMARY
          
          echo ""
          echo "🎉 Deployment workflow completed!"
          echo "Check the summary above for detailed results."
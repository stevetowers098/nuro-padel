name: 🚀 NuroPadel Docker Deployment

on:
  push:
    branches: [ docker-containers ]
  pull_request:
    branches: [ docker-containers ]
  workflow_dispatch:
    inputs:
      deploy_to_vm:
        description: 'Deploy to VM after build'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: nuro-padel

jobs:
  # === BUILD & TEST JOBS ===
  build-yolo-combined:
    name: 🔨 Build YOLO Combined Service
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_PREFIX }}/yolo-combined
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push YOLO Combined
      uses: docker/build-push-action@v5
      with:
        context: ./yolo-combined-service
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-mmpose:
    name: 🔨 Build MMPose Service  
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_PREFIX }}/mmpose
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push MMPose
      uses: docker/build-push-action@v5
      with:
        context: ./mmpose-service
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-yolo-nas:
    name: 🔨 Build YOLO-NAS Service
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_PREFIX }}/yolo-nas
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push YOLO-NAS
      uses: docker/build-push-action@v5
      with:
        context: ./yolo-nas-service
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # === INTEGRATION TEST ===
  integration-test:
    name: 🧪 Integration Tests
    runs-on: ubuntu-latest
    needs: [build-yolo-combined, build-mmpose, build-yolo-nas]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose
        
    - name: Create test environment
      run: |
        mkdir -p weights
        echo "# Test weights directory" > weights/README.md
        
    - name: Start services
      run: |
        # Use pre-built images from GitHub Registry
        export REGISTRY=${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_PREFIX }}
        docker-compose -f docker-compose.test.yml up -d
        
    - name: Wait for services
      run: |
        echo "Waiting for services to be healthy..."
        sleep 60
        
    - name: Test service endpoints
      run: |
        # Test health endpoints
        curl -f http://localhost:8001/healthz || exit 1
        curl -f http://localhost:8003/healthz || exit 1  
        curl -f http://localhost:8004/healthz || exit 1
        curl -f http://localhost/healthz || exit 1
        
    - name: Cleanup
      if: always()
      run: docker-compose -f docker-compose.test.yml down -v

  # === VM DEPLOYMENT ===
  deploy-vm:
    name: 🚀 Deploy to VM
    runs-on: ubuntu-latest
    needs: [build-yolo-combined, build-mmpose, build-yolo-nas]
    if: |
      (github.ref == 'refs/heads/docker-containers' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_to_vm == 'true')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH key
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.VM_SSH_KEY }}
        
    - name: Add VM to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts
        
    - name: Deploy to VM
      run: |
        # Sync files to VM
        rsync -avz --delete \
          --exclude='.git*' \
          --exclude='__pycache__' \
          --exclude='*.pyc' \
          --exclude='.github' \
          ./ ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:${{ secrets.VM_PATH }}/
          
    - name: Run deployment on VM
      run: |
        ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
          cd ${{ secrets.VM_PATH }}
          
          # Make script executable
          chmod +x deploy.sh
          
          # Update images from registry
          export REGISTRY=${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_PREFIX }}
          docker-compose pull
          
          # Deploy with zero downtime
          ./deploy.sh --deploy
          
          # Verify deployment
          sleep 30
          curl -f http://localhost/healthz || exit 1
          
          echo "✅ Deployment successful!"
        EOF
        
    - name: Notify deployment status
      if: always()
      run: |
        if [ $? -eq 0 ]; then
          echo "🎉 VM deployment successful!"
        else
          echo "❌ VM deployment failed!"
          exit 1
        fi

  # === CLEANUP ===
  cleanup:
    name: 🧹 Cleanup old images
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/docker-containers'
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Cleanup old container images
      uses: actions/delete-package-versions@v4
      with:
        package-name: '${{ env.IMAGE_PREFIX }}/yolo-combined'
        package-type: 'container'
        min-versions-to-keep: 5
        delete-only-untagged-versions: true
        
    - name: Cleanup MMPose images
      uses: actions/delete-package-versions@v4
      with:
        package-name: '${{ env.IMAGE_PREFIX }}/mmpose'
        package-type: 'container'
        min-versions-to-keep: 5
        delete-only-untagged-versions: true
        
    - name: Cleanup YOLO-NAS images
      uses: actions/delete-package-versions@v4
      with:
        package-name: '${{ env.IMAGE_PREFIX }}/yolo-nas'
        package-type: 'container'
        min-versions-to-keep: 5
        delete-only-untagged-versions: true
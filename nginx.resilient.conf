# NuroPadel Resilient Nginx Configuration - Graceful Service Failure Handling
# Routes traffic to available services, degrades gracefully when services are down

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Increase timeouts for AI processing
    proxy_connect_timeout 300s;
    proxy_send_timeout 300s;
    proxy_read_timeout 300s;
    client_max_body_size 100M;

    # Resilient upstream services - fail fast and recover quickly
    upstream yolo_combined {
        server yolo-combined:8001 max_fails=1 fail_timeout=10s;
        # Fallback: return 503 when service is down
    }
    
    upstream mmpose {
        server mmpose:8003 max_fails=1 fail_timeout=10s;
        # Fallback: return 503 when service is down
    }
    
    upstream yolo_nas {
        server yolo-nas:8004 max_fails=1 fail_timeout=10s;
        # Fallback: return 503 when service is down
    }

    # Lua script for dynamic service discovery (if available)
    # lua_package_path "/etc/nginx/lua/?.lua;;";

    # Main server block
    server {
        listen 80;
        server_name localhost padel-ai.com *.padel-ai.com;

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # === YOLO Combined Service Routes ===
        location ~ ^/(yolo11|yolov8)/ {
            # Try the service, if it fails return a helpful error
            error_page 502 503 504 = @yolo_combined_error;
            
            proxy_pass http://yolo_combined;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Add response headers
            add_header X-Service "yolo-combined" always;
            add_header X-Container "nuro-padel-yolo-combined" always;
        }

        # YOLO Combined health check with graceful failure
        location /yolo-combined/healthz {
            error_page 502 503 504 = @yolo_combined_health_error;
            
            proxy_pass http://yolo_combined/healthz;
            proxy_set_header Host $host;
            add_header X-Service "yolo-combined" always;
        }

        # === MMPose Service Routes ===
        location /mmpose/ {
            error_page 502 503 504 = @mmpose_error;
            
            proxy_pass http://mmpose;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Add response headers
            add_header X-Service "mmpose" always;
            add_header X-Container "nuro-padel-mmpose" always;
        }

        # MMPose health check with graceful failure
        location /mmpose/healthz {
            error_page 502 503 504 = @mmpose_health_error;
            
            proxy_pass http://mmpose/healthz;
            proxy_set_header Host $host;
            add_header X-Service "mmpose" always;
        }

        # === YOLO-NAS Service Routes ===
        location /yolo-nas/ {
            error_page 502 503 504 = @yolo_nas_error;
            
            proxy_pass http://yolo_nas;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Add response headers
            add_header X-Service "yolo-nas" always;
            add_header X-Container "nuro-padel-yolo-nas" always;
        }

        # YOLO-NAS health check with graceful failure
        location /yolo-nas/healthz {
            error_page 502 503 504 = @yolo_nas_health_error;
            
            proxy_pass http://yolo_nas/healthz;
            proxy_set_header Host $host;
            add_header X-Service "yolo-nas" always;
        }

        # === Global Health Checks - Dynamic Service Discovery ===
        location /healthz {
            access_log off;
            # This endpoint will check which services are actually available
            return 200 '{"status":"partial","note":"Check individual service health endpoints","services":{"yolo_combined":"/yolo-combined/healthz","mmpose":"/mmpose/healthz","yolo_nas":"/yolo-nas/healthz"},"timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }

        # === Dynamic Service Discovery ===
        location / {
            return 200 '{
                "nuro_padel_api": "v1.0",
                "mode": "resilient",
                "note": "Services may be partially available. Check health endpoints.",
                "services": {
                    "yolo_combined": {
                        "endpoints": ["/yolo11/pose", "/yolo11/object", "/yolov8/pose", "/yolov8/object"],
                        "health": "/yolo-combined/healthz"
                    },
                    "mmpose": {
                        "endpoints": ["/mmpose/pose"],
                        "health": "/mmpose/healthz"
                    },
                    "yolo_nas": {
                        "endpoints": ["/yolo-nas/pose", "/yolo-nas/object"],
                        "health": "/yolo-nas/healthz"
                    }
                },
                "global_health": "/healthz"
            }';
            add_header Content-Type application/json;
        }

        # === Error Handlers for Individual Services ===
        location @yolo_combined_error {
            return 503 '{"error":"YOLO Combined service unavailable","service":"yolo-combined","alternatives":["mmpose","yolo-nas"],"timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }

        location @yolo_combined_health_error {
            return 503 '{"status":"unhealthy","service":"yolo-combined","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }

        location @mmpose_error {
            return 503 '{"error":"MMPose service unavailable","service":"mmpose","alternatives":["yolo-combined","yolo-nas"],"timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }

        location @mmpose_health_error {
            return 503 '{"status":"unhealthy","service":"mmpose","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }

        location @yolo_nas_error {
            return 503 '{"error":"YOLO-NAS service unavailable","service":"yolo-nas","alternatives":["yolo-combined","mmpose"],"timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }

        location @yolo_nas_health_error {
            return 503 '{"status":"unhealthy","service":"yolo-nas","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }

        # Default error page
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            return 502 '{"error":"System temporarily unavailable","note":"Some services may still be available - check individual endpoints","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }
    }
}
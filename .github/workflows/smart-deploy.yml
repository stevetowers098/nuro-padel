name: Smart Container Build
on:
  push:
    branches: [ main, develop, master, docker-containers, feature/*, fix/*, hotfix/* ]
  pull_request:
    branches: [ main, master, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_PREFIX: stevetowers098/nuro-padel

jobs:
  detect-changes:
    runs-on: ubuntu-22.04
    outputs:
      yolo-combined: ${{ steps.changes.outputs.yolo-combined }}
      mmpose: ${{ steps.changes.outputs.mmpose }}
      yolo-nas: ${{ steps.changes.outputs.yolo-nas }}
      rf-detr: ${{ steps.changes.outputs.rf-detr }}
      vitpose: ${{ steps.changes.outputs.vitpose }}
      nginx: ${{ steps.changes.outputs.nginx }}
      docker-compose: ${{ steps.changes.outputs.docker-compose }}
      docs-only: ${{ steps.changes.outputs.docs-only }}
      dependencies-only: ${{ steps.changes.outputs.dependencies-only }}
      code-changes: ${{ steps.changes.outputs.code-changes }}
      config-changes: ${{ steps.changes.outputs.config-changes }}
      scripts-only: ${{ steps.changes.outputs.scripts-only }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            yolo-combined:
              - 'services/yolo-combined/**'
            mmpose:
              - 'services/mmpose/**'
            yolo-nas:
              - 'services/yolo-nas/**'
            rf-detr:
              - 'services/rf-detr/**'
            vitpose:
              - 'services/vitpose/**'
            nginx:
              - 'deployment/nginx*.conf'
            docker-compose:
              - 'deployment/docker-compose*.yml'
              - 'Dockerfile*'
            docs-only:
              - '*.md'
              - 'docs/**'
              - 'README*'
              - 'LICENSE*'
              - '.gitignore'
            dependencies-only:
              - 'requirements/**'
              - '**/requirements.txt'
              - '**/package.json'
              - '**/package-lock.json'
            code-changes:
              - '**/*.py'
              - '**/*.js'
              - '**/*.ts'
              - '**/*.jsx'
              - '**/*.tsx'
            config-changes:
              - '**/configs/**'
              - '*.conf'
              - '*.yml'
              - '*.yaml'
              - '*.json'
              - '.env*'
            scripts-only:
              - 'scripts/**'
              - '*.sh'
              - '*.bat'
              - 'deploy*.sh'

  build-yolo-combined:
    name: üöÄ Build YOLO Combined Service
    needs: detect-changes
    if: needs.detect-changes.outputs.yolo-combined == 'true'
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/yolo-combined
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push YOLO Combined image
        run: |
          TAGS="${{ steps.meta.outputs.tags }}"
          LABELS="${{ steps.meta.outputs.labels }}"
          
          for attempt in 1 2 3; do
            echo "üî® Building YOLO Combined (attempt $attempt/3)..."
            
            if docker buildx build \
              --push \
              --cache-from type=gha \
              --cache-to type=gha,mode=max \
              $(echo "$TAGS" | sed 's/^/--tag /' | tr '\n' ' ') \
              $(echo "$LABELS" | sed 's/^/--label /' | tr '\n' ' ') \
              ./services/yolo-combined; then
              echo "‚úÖ YOLO Combined build successful"
              exit 0
            fi
            
            echo "‚ùå Build attempt $attempt failed"
            if [ $attempt -lt 3 ]; then
              echo "‚è≥ Retrying in 30 seconds..."
              sleep 30
            fi
          done
          
          echo "üö® YOLO Combined build failed after 3 attempts"
          exit 1

  build-mmpose:
    name: ü§∏ Build MMPose Service
    needs: detect-changes
    if: needs.detect-changes.outputs.mmpose == 'true'
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/mmpose
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push MMPose image
        run: |
          TAGS="${{ steps.meta.outputs.tags }}"
          LABELS="${{ steps.meta.outputs.labels }}"
          
          for attempt in 1 2 3; do
            echo "üî® Building MMPose (attempt $attempt/3)..."
            
            if docker buildx build \
              --push \
              --cache-from type=gha \
              --cache-to type=gha,mode=max \
              $(echo "$TAGS" | sed 's/^/--tag /' | tr '\n' ' ') \
              $(echo "$LABELS" | sed 's/^/--label /' | tr '\n' ' ') \
              ./services/mmpose; then
              echo "‚úÖ MMPose build successful"
              exit 0
            fi
            
            echo "‚ùå Build attempt $attempt failed"
            if [ $attempt -lt 3 ]; then
              echo "‚è≥ Retrying in 30 seconds..."
              sleep 30
            fi
          done
          
          echo "üö® MMPose build failed after 3 attempts"
          exit 1

  build-yolo-nas:
    name: üéØ Build YOLO-NAS Service
    needs: detect-changes
    if: needs.detect-changes.outputs.yolo-nas == 'true'
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/yolo-nas
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push YOLO-NAS image
        run: |
          TAGS="${{ steps.meta.outputs.tags }}"
          LABELS="${{ steps.meta.outputs.labels }}"
          
          for attempt in 1 2 3; do
            echo "üî® Building YOLO-NAS (attempt $attempt/3)..."
            
            if docker buildx build \
              --push \
              --cache-from type=gha \
              --cache-to type=gha,mode=max \
              $(echo "$TAGS" | sed 's/^/--tag /' | tr '\n' ' ') \
              $(echo "$LABELS" | sed 's/^/--label /' | tr '\n' ' ') \
              ./services/yolo-nas; then
              echo "‚úÖ YOLO-NAS build successful"
              exit 0
            fi
            
            echo "‚ùå Build attempt $attempt failed"
            if [ $attempt -lt 3 ]; then
              echo "‚è≥ Retrying in 30 seconds..."
              sleep 30
            fi
          done
          
          echo "üö® YOLO-NAS build failed after 3 attempts"
          exit 1

  build-rf-detr:
    name: üéØ Build RF-DETR Service
    needs: detect-changes
    if: needs.detect-changes.outputs.rf-detr == 'true'
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/rf-detr
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push RF-DETR image
        run: |
          TAGS="${{ steps.meta.outputs.tags }}"
          LABELS="${{ steps.meta.outputs.labels }}"
          
          for attempt in 1 2 3; do
            echo "üî® Building RF-DETR (attempt $attempt/3)..."
            
            if docker buildx build \
              --push \
              --cache-from type=gha \
              --cache-to type=gha,mode=max \
              $(echo "$TAGS" | sed 's/^/--tag /' | tr '\n' ' ') \
              $(echo "$LABELS" | sed 's/^/--label /' | tr '\n' ' ') \
              ./services/rf-detr; then
              echo "‚úÖ RF-DETR build successful"
              exit 0
            fi
            
            echo "‚ùå Build attempt $attempt failed"
            if [ $attempt -lt 3 ]; then
              echo "‚è≥ Retrying in 30 seconds..."
              sleep 30
            fi
          done
          
          echo "üö® RF-DETR build failed after 3 attempts"
          exit 1

  build-vitpose:
    name: üí™ Build ViTPose Service
    needs: detect-changes
    if: needs.detect-changes.outputs.vitpose == 'true'
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/vitpose
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push ViTPose image
        run: |
          TAGS="${{ steps.meta.outputs.tags }}"
          LABELS="${{ steps.meta.outputs.labels }}"
          
          for attempt in 1 2 3; do
            echo "üî® Building ViTPose (attempt $attempt/3)..."
            
            if docker buildx build \
              --push \
              --cache-from type=gha \
              --cache-to type=gha,mode=max \
              $(echo "$TAGS" | sed 's/^/--tag /' | tr '\n' ' ') \
              $(echo "$LABELS" | sed 's/^/--label /' | tr '\n' ' ') \
              ./services/vitpose; then
              echo "‚úÖ ViTPose build successful"
              exit 0
            fi
            
            echo "‚ùå Build attempt $attempt failed"
            if [ $attempt -lt 3 ]; then
              echo "‚è≥ Retrying in 30 seconds..."
              sleep 30
            fi
          done
          
          echo "üö® ViTPose build failed after 3 attempts"
          exit 1

  build-summary:
    name: üìä Build Summary
    needs: [detect-changes, build-yolo-combined, build-mmpose, build-yolo-nas, build-rf-detr, build-vitpose]
    if: always()
    runs-on: ubuntu-22.04
    steps:
      - name: Validate Build Results
        run: |
          echo "üîç Validating build results..."
          
          YOLO_COMBINED_RESULT="${{ needs.build-yolo-combined.result }}"
          MMPOSE_RESULT="${{ needs.build-mmpose.result }}"
          YOLO_NAS_RESULT="${{ needs.build-yolo-nas.result }}"
          RF_DETR_RESULT="${{ needs.build-rf-detr.result }}"
          VITPOSE_RESULT="${{ needs.build-vitpose.result }}"
          
          echo "Build Results:"
          echo "  üöÄ YOLO Combined: $YOLO_COMBINED_RESULT"
          echo "  ü§∏ MMPose: $MMPOSE_RESULT"
          echo "  üéØ YOLO-NAS: $YOLO_NAS_RESULT"
          echo "  üéØ RF-DETR: $RF_DETR_RESULT"
          echo "  üí™ ViTPose: $VITPOSE_RESULT"
          
          # Fail workflow if any build failed
          if [[ "$YOLO_COMBINED_RESULT" == "failure" ]] || [[ "$MMPOSE_RESULT" == "failure" ]] || [[ "$YOLO_NAS_RESULT" == "failure" ]] || [[ "$RF_DETR_RESULT" == "failure" ]] || [[ "$VITPOSE_RESULT" == "failure" ]]; then
            echo ""
            echo "üö® BUILD FAILED!"
            echo "‚ùå One or more container builds failed"
            exit 1
          fi
          
          echo "‚úÖ All builds completed successfully"
          
      - name: üìä Container Build Analytics
        run: |
          echo "üöÄ Smart Build Analytics"
          echo "=============================================="
          
          # Calculate build efficiency
          total_services=5
          changed_services=$(( ${{ needs.detect-changes.outputs.yolo-combined == 'true' && 1 || 0 }} + ${{ needs.detect-changes.outputs.mmpose == 'true' && 1 || 0 }} + ${{ needs.detect-changes.outputs.yolo-nas == 'true' && 1 || 0 }} + ${{ needs.detect-changes.outputs.rf-detr == 'true' && 1 || 0 }} + ${{ needs.detect-changes.outputs.vitpose == 'true' && 1 || 0 }} ))
          skipped_services=$((total_services - changed_services))
          
          echo "üì¶ Container Images Built:"
          echo "  üöÄ YOLO Combined: ${{ needs.detect-changes.outputs.yolo-combined == 'true' && '‚úÖ Built' || '‚è≠Ô∏è Skipped' }}"
          echo "  ü§∏ MMPose: ${{ needs.detect-changes.outputs.mmpose == 'true' && '‚úÖ Built' || '‚è≠Ô∏è Skipped' }}"
          echo "  üéØ YOLO-NAS: ${{ needs.detect-changes.outputs.yolo-nas == 'true' && '‚úÖ Built' || '‚è≠Ô∏è Skipped' }}"
          echo "  üéØ RF-DETR: ${{ needs.detect-changes.outputs.rf-detr == 'true' && '‚úÖ Built' || '‚è≠Ô∏è Skipped' }}"
          echo "  üí™ ViTPose: ${{ needs.detect-changes.outputs.vitpose == 'true' && '‚úÖ Built' || '‚è≠Ô∏è Skipped' }}"
          
          echo ""
          echo "üìà Build Efficiency:"
          echo "  ‚è±Ô∏è  Images built: $changed_services/$total_services"
          echo "  ‚ö° Images skipped: $skipped_services"
          echo "  üéØ Time saved: $((skipped_services * 12)) minutes"
          echo "  üí∞ Build optimization: $((skipped_services * 100 / total_services))%"
          
          if [[ $changed_services -eq 0 ]]; then
            echo "  üéâ No changes detected - maximum efficiency!"
          elif [[ $skipped_services -gt 1 ]]; then
            echo "  üëç Good optimization achieved!"
          else
            echo "  üîÑ Standard build completed!"
          fi

  deploy-to-vm:
    name: üöÄ Deploy to VM
    needs: [detect-changes, build-summary]
    if: always() && (needs.build-yolo-combined.result == 'success' || needs.build-mmpose.result == 'success' || needs.build-yolo-nas.result == 'success' || needs.build-rf-detr.result == 'success' || needs.build-vitpose.result == 'success' || needs.build-yolo-combined.result == 'skipped' || needs.build-mmpose.result == 'skipped' || needs.build-yolo-nas.result == 'skipped' || needs.build-rf-detr.result == 'skipped' || needs.build-vitpose.result == 'skipped')
    runs-on: ubuntu-22.04
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        
      - name: üîß Robust SSH Setup
        env:
          VM_IP: ${{ secrets.VM_IP }}
          SSH_PRIVATE_KEY: ${{ secrets.VM_SSH_KEY }}
        run: |
          # Validate inputs
          if [ -z "$VM_IP" ]; then
            echo "‚ùå VM_IP secret is missing"
            echo "üìù Please configure VM_IP in Repository Settings > Secrets and variables > Actions"
            exit 1
          fi
          
          if [ -z "$SSH_PRIVATE_KEY" ]; then
            echo "‚ùå VM_SSH_KEY secret is missing"
            echo "üìù Please configure VM_SSH_KEY in Repository Settings > Secrets and variables > Actions"
            exit 1
          fi
          
          # Clean and validate IP
          CLEAN_VM_IP=$(echo "$VM_IP" | tr -d '[:space:]')
          echo "üåê Using VM IP: $CLEAN_VM_IP"
          
          if [[ ! "$CLEAN_VM_IP" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            echo "‚ùå VM_IP format is invalid: '$CLEAN_VM_IP'"
            echo "üìù Expected format: XXX.XXX.XXX.XXX (e.g., 35.189.53.46)"
            exit 1
          fi
          
          # Setup SSH directory
          mkdir -p ~/.ssh/
          chmod 700 ~/.ssh/
          
          # Setup private key
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Multiple approaches for known_hosts
          echo "üîë Setting up known_hosts..."
          
          # Method 1: ssh-keyscan (preferred)
          if ssh-keyscan -H "$CLEAN_VM_IP" >> ~/.ssh/known_hosts 2>/dev/null; then
            echo "‚úÖ ssh-keyscan successful"
          # Method 2: Manual known_hosts (fallback)
          else
            echo "‚ö†Ô∏è ssh-keyscan failed, using StrictHostKeyChecking=no"
            echo "Host $CLEAN_VM_IP" >> ~/.ssh/config
            echo "  StrictHostKeyChecking no" >> ~/.ssh/config
            echo "  UserKnownHostsFile /dev/null" >> ~/.ssh/config
          fi
          
          chmod 600 ~/.ssh/known_hosts 2>/dev/null || true
          chmod 600 ~/.ssh/config 2>/dev/null || true
          
          # Test SSH connection
          echo "üß™ Testing SSH connection..."
          if ssh -o ConnectTimeout=10 -o BatchMode=yes Towers@$CLEAN_VM_IP "echo 'SSH connection successful'" 2>/dev/null; then
            echo "‚úÖ SSH test successful"
          else
            echo "‚ùå SSH test failed - proceeding anyway (deployment may still work)"
          fi

      - name: üîß Fix Script Permissions & Deploy
        env:
          VM_IP: ${{ secrets.VM_IP }}
        run: |
          # Fix script permissions first
          echo "üîß Making scripts executable..."
          chmod +x scripts/deploy.sh 2>/dev/null || echo "deploy.sh not found locally"
          chmod +x scripts/*.sh 2>/dev/null || echo "No scripts found locally"
          
          CLEAN_VM_IP=$(echo "$VM_IP" | tr -d '[:space:]')
          echo "üöÄ Deploying all 5 AI services to VM..."
          echo "‚è∞ Deployment started at: $(date)"
          
          # Option 1: Try local script if it exists
          if [ -f "./scripts/deploy.sh" ]; then
            echo "üì¶ Running local deploy script..."
            ./scripts/deploy.sh --vm --ip "$CLEAN_VM_IP"
          else
            # Option 2: Direct SSH deployment commands
            echo "üì¶ Running direct SSH deployment..."
            ssh -o StrictHostKeyChecking=no Towers@$CLEAN_VM_IP "
              cd /opt/padel-docker
              echo 'üîÑ Pulling latest images...'
              docker-compose pull
              echo 'üöÄ Restarting services...'
              docker-compose up -d
              echo '‚úÖ Deployment complete!'
              docker-compose ps
            "
          fi
          
          echo "‚úÖ Deployment completed - VM deployment successful!"

  health-check:
    name: üè• Health Check & Validation
    needs: [deploy-to-vm]
    runs-on: ubuntu-22.04
    steps:
      - name: ‚è≥ Wait for services to stabilize
        run: |
          echo "‚è≥ Waiting 180 seconds for all 5 AI services to fully start and load models..."
          echo "üîÑ This includes GPU initialization and model loading time"
          echo "üìä Services starting: YOLO Combined, MMPose, YOLO-NAS, RF-DETR, ViTPose"
          
          # Incremental wait with progress updates
          for i in {1..6}; do
            echo "‚è±Ô∏è  Wait progress: ${i}/6 (30 seconds each)"
            sleep 30
          done
          
          echo "‚úÖ 180-second wait period completed - proceeding with health checks"

      - name: üè• Comprehensive Health Check
        run: |
          echo "üè• Starting comprehensive health checks..."
          echo "‚è∞ Health check started at: $(date)"
          
          # Setup SSH for health checks with robust error handling
          CLEAN_VM_IP=$(echo "${{ secrets.VM_IP }}" | tr -d '[:space:]')
          mkdir -p ~/.ssh
          echo "${{ secrets.VM_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Robust known_hosts setup (same as deploy step)
          echo "üîë Setting up SSH for health checks..."
          if ssh-keyscan -H "$CLEAN_VM_IP" >> ~/.ssh/known_hosts 2>/dev/null; then
            echo "‚úÖ ssh-keyscan successful for health checks"
          else
            echo "‚ö†Ô∏è ssh-keyscan failed, using SSH config fallback"
            echo "Host $CLEAN_VM_IP" >> ~/.ssh/config
            echo "  StrictHostKeyChecking no" >> ~/.ssh/config
            echo "  UserKnownHostsFile /dev/null" >> ~/.ssh/config
            chmod 600 ~/.ssh/config
          fi
          
          # Run comprehensive health checks on VM
          ssh -o StrictHostKeyChecking=no towers@${{ secrets.VM_IP }} << 'EOF'
            cd /opt/padel-docker
            
            echo "üê≥ Docker Container Status:"
            echo "================================"
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            echo ""
            
            echo "üìã Docker Compose Service Status:"
            echo "======================================"
            cd deployment
            docker-compose ps
            echo ""
            
            # Health check function with retries
            check_service_health() {
              local service_name=$1
              local port=$2
              local endpoint="http://localhost:${port}/healthz"
              local max_attempts=3
              local attempt=1
              
              echo "üîç Testing ${service_name} on port ${port}..."
              
              while [ $attempt -le $max_attempts ]; do
                echo "   Attempt ${attempt}/${max_attempts}..."
                
                if timeout 45 curl -f -s "$endpoint" > /dev/null 2>&1; then
                  echo "‚úÖ ${service_name} health check PASSED"
                  local response=$(curl -s "$endpoint" 2>/dev/null || echo "No response")
                  echo "üìä ${service_name} response: $response"
                  return 0
                else
                  echo "‚ö†Ô∏è  ${service_name} attempt ${attempt}/${max_attempts} failed"
                  
                  if [ $attempt -lt $max_attempts ]; then
                    echo "‚è≥ Waiting 30 seconds before retry..."
                    sleep 30
                  fi
                  
                  ((attempt++))
                fi
              done
              
              echo "‚ùå ${service_name} health check FAILED after ${max_attempts} attempts"
              docker-compose logs --tail 15 "$service_name" || echo "Could not retrieve logs"
              return 1
            }
            
            # Test all 5 services
            echo "üß™ Testing all 5 AI services..."
            echo "================================="
            
            health_check_failed=false
            
            if ! check_service_health "yolo-combined" 8001; then
              health_check_failed=true
            fi
            echo ""
            
            if ! check_service_health "mmpose" 8003; then
              health_check_failed=true
            fi
            echo ""
            
            if ! check_service_health "yolo-nas" 8004; then
              health_check_failed=true
            fi
            echo ""
            
            if ! check_service_health "rf-detr" 8005; then
              health_check_failed=true
            fi
            echo ""
            
            if ! check_service_health "vitpose" 8006; then
              health_check_failed=true
            fi
            echo ""
            
            # GPU Access Verification
            echo "‚ö° Verifying GPU access and memory..."
            echo "==================================="
            if command -v nvidia-smi >/dev/null 2>&1; then
              echo "üñ•Ô∏è  GPU Status:"
              nvidia-smi --query-gpu=name,memory.total,memory.used --format=csv,noheader,nounits
              echo ""
              
              echo "üê≥ Testing GPU access in containers..."
              for service in yolo-combined mmpose yolo-nas rf-detr vitpose; do
                echo "Testing GPU access in $service..."
                if docker-compose exec -T "$service" nvidia-smi --query-gpu=memory.used --format=csv,noheader,nounits >/dev/null 2>&1; then
                  echo "‚úÖ $service has GPU access"
                else
                  echo "‚ùå $service lacks GPU access"
                  health_check_failed=true
                fi
              done
            else
              echo "‚ö†Ô∏è  nvidia-smi not available"
            fi
            echo ""
            
            # Final health check summary
            echo "üìä HEALTH CHECK SUMMARY"
            echo "======================="
            if [ "$health_check_failed" = true ]; then
              echo "‚ùå Some services failed health checks!"
              exit 1
            else
              echo "‚úÖ ALL 5 SERVICES ARE HEALTHY!"
              echo "üéâ Deployment completed successfully!"
            fi
          EOF

  deployment-summary:
    name: üìà Deployment Summary
    needs: [deploy-to-vm, health-check]
    runs-on: ubuntu-22.04
    if: always()
    steps:
      - name: üìà Generate Deployment Summary
        run: |
          echo "# üöÄ Smart Deployment Summary Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìä Deployment Status" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy-to-vm.result }}" = "success" ] && [ "${{ needs.health-check.result }}" = "success" ]; then
            echo "‚úÖ **DEPLOYMENT SUCCESSFUL** - All 5 AI services are healthy and operational!" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **DEPLOYMENT FAILED** - Check individual job logs for details" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üîó Service URLs" >> $GITHUB_STEP_SUMMARY
          echo "- **YOLO Combined**: http://${{ secrets.VM_IP }}:8001/healthz" >> $GITHUB_STEP_SUMMARY
          echo "- **MMPose**: http://${{ secrets.VM_IP }}:8003/healthz" >> $GITHUB_STEP_SUMMARY
          echo "- **YOLO-NAS**: http://${{ secrets.VM_IP }}:8004/healthz" >> $GITHUB_STEP_SUMMARY
          echo "- **RF-DETR**: http://${{ secrets.VM_IP }}:8005/healthz" >> $GITHUB_STEP_SUMMARY
          echo "- **ViTPose**: http://${{ secrets.VM_IP }}:8006/healthz" >> $GITHUB_STEP_SUMMARY
          echo "- **Load Balancer**: http://${{ secrets.VM_IP }}:8080/" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üéâ Smart deployment with change detection completed!"
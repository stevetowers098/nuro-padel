    - name: Deploy Application Code and Setup Environments
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.VM_HOST }}
        username: ${{ secrets.VM_USER }}
        key: ${{ secrets.VM_SSH_KEY }}
        script: |
          # Stop all services
          echo "Stopping services..."
          sudo systemctl stop padel-api yolo11-service yolov8-service mmpose-service yolo-nas-service combined-service || true
          
          # Update code (This part creates /opt/padel/app/app/... structure)
          echo "Updating code..."
          cd /opt/padel
          
          if [ -d "app_old_backup" ]; then rm -rf app_old_backup; fi
          if [ -d "app_current_backup" ]; then mv app_current_backup app_old_backup || true; fi
          if [ -d "app" ]; then mv app app_current_backup || true; fi
          
          git clone https://github.com/stevetowers098/nuro-padel.git app_new_clone
          mv app_new_clone app # This makes /opt/padel/app the repo root.
                               # So, repo's app/ folder is at /opt/padel/app/app/
          
          # Copy requirements from the cloned repo root to /opt/padel/
          echo "Copying requirements files..."
          cp -r /opt/padel/app/requirements /opt/padel/
          cp /opt/padel/app/requirements.txt /opt/padel/
          
          # --- VIRTUAL ENVIRONMENT UPDATES ---
          
          # Update shared environment
          echo "Updating shared environment (/opt/padel/shared/venv)..."
          cd /opt/padel/shared
          if [ ! -d "venv" ]; then python3 -m venv venv; fi
          source venv/bin/activate
          pip install --upgrade pip setuptools --quiet --no-cache-dir
          pip install -r /opt/padel/requirements.txt --quiet --no-cache-dir 
          deactivate
          
          # Update YOLO environment (/opt/padel/yolo/venv)
          echo "Updating YOLO environment..."
          cd /opt/padel/yolo
          if [ ! -d "venv" ]; then python3 -m venv venv; fi
          source venv/bin/activate
          pip install --upgrade pip setuptools --quiet --no-cache-dir
          pip install -r /opt/padel/requirements/yolo.txt --quiet --no-cache-dir 
          deactivate
          
          # Update MMPose environment (/opt/padel/mmpose/venv)
          echo "Updating MMPose environment..."
          cd /opt/padel/mmpose
          if [ ! -d "venv" ]; then python3 -m venv venv; fi
          source venv/bin/activate
          pip install --upgrade pip setuptools --quiet --no-cache-dir
          echo "Aggressively uninstalling torch, torchvision, torchaudio, triton, openxlab before reinstall for MMPose..."
          pip uninstall openxlab torch torchvision torchaudio triton -y --quiet || true 
          echo "Installing PyTorch for MMPose (CUDA 11.8) with --no-cache-dir..."
          pip install --no-cache-dir torch==2.0.1 --index-url https://download.pytorch.org/whl/cu118 torchvision==0.15.2 --index-url https://download.pytorch.org/whl/cu118 torchaudio==2.0.2 --index-url https://download.pytorch.org/whl/cu118 --quiet
          echo "Installing OpenMIM for MMPose..."
          pip install --no-cache-dir openmim --quiet
          echo "Verifying PyTorch installation before MIM for MMPose..."
          python -c "import torch; print(f'PyTorch version for MIM in MMPose env: {torch.__version__}')" || echo "ERROR: PyTorch check failed in MMPose env!"
          echo "Installing MMCV via MIM for MMPose..."
          mim install mmcv==2.0.1 --quiet 
          echo "Verifying MMCV installation for MMPose..."
          python -c "import mmcv; print(f'MMCV version for MMPose env: {mmcv.__version__}'); from mmcv.ops import MultiScaleDeformableAttention; print('MultiScaleDeformableAttention imported successfully from mmcv.ops')" || echo "ERROR: MMCV (full) verification failed in MMPose env!"
          echo "Installing other MMPose dependencies from requirements/mmpose.txt..."
          pip install --no-cache-dir -r /opt/padel/requirements/mmpose.txt --quiet 
          deactivate
          
          # Update YOLO-NAS environment (/opt/padel/yolo-nas/venv)
          echo "Updating YOLO-NAS environment..."
          cd /opt/padel/yolo-nas
          if [ ! -d "venv" ]; then python3 -m venv venv; fi
          source venv/bin/activate
          pip install --upgrade pip setuptools --quiet --no-cache-dir
          pip install -r /opt/padel/requirements/yolo-nas.txt --quiet --no-cache-dir 
          deactivate
          
          echo "Skipping Combined environment update as combined-service will be disabled."
          
          # --- SYSTEMD SERVICE FILE CREATION (Corrected Paths) ---
          echo "Creating/Updating systemd service files with corrected paths..."

          # Main API Service (padel-api)
          sudo tee /etc/systemd/system/padel-api.service > /dev/null << 'EOL'
          [Unit]
          Description=NuroPadel Main API Gateway
          After=network.target
          [Service]
          User=Towers
          Group=Towers
          WorkingDirectory=/opt/padel/app/app
          ExecStart=/opt/padel/shared/venv/bin/python main.py
          Restart=always
          RestartSec=10
          Environment="PYTHONPATH=/opt/padel/app/app"
          [Install]
          WantedBy=multi-user.target
          EOL
          
          # YOLO11 Service
          sudo tee /etc/systemd/system/yolo11-service.service > /dev/null << 'EOL'
          [Unit]
          Description=YOLOv11 Pose and Object Detection Service
          After=network.target
          [Service]
          User=Towers
          Group=Towers
          WorkingDirectory=/opt/padel/app/app
          ExecStart=/opt/padel/yolo/venv/bin/python -m models.yolo11_service
          Restart=always
          RestartSec=10
          Environment="PYTHONPATH=/opt/padel/app/app"
          [Install]
          WantedBy=multi-user.target
          EOL
          
          # YOLOv8 Service
          sudo tee /etc/systemd/system/yolov8-service.service > /dev/null << 'EOL'
          [Unit]
          Description=YOLOv8 Object Detection Service
          After=network.target
          [Service]
          User=Towers
          Group=Towers
          WorkingDirectory=/opt/padel/app/app
          ExecStart=/opt/padel/yolo/venv/bin/python -m models.yolov8_service
          Restart=always
          RestartSec=10
          Environment="PYTHONPATH=/opt/padel/app/app"
          [Install]
          WantedBy=multi-user.target
          EOL
          
          # MMPose Service
          sudo tee /etc/systemd/system/mmpose-service.service > /dev/null << 'EOL'
          [Unit]
          Description=MMPose Pose Estimation Service
          After=network.target
          [Service]
          User=Towers
          Group=Towers
          WorkingDirectory=/opt/padel/app/app
          ExecStart=/opt/padel/mmpose/venv/bin/python -m models.mmpose_service
          Restart=always
          RestartSec=10
          Environment="PYTHONPATH=/opt/padel/app/app"
          Environment="CUDA_HOME=/usr/local/cuda-11.8" 
          [Install]
          WantedBy=multi-user.target
          EOL
          
          # YOLO-NAS Service
          sudo tee /etc/systemd/system/yolo-nas-service.service > /dev/null << 'EOL'
          [Unit]
          Description=YOLO-NAS Pose Estimation Service
          After=network.target
          [Service]
          User=Towers
          Group=Towers
          WorkingDirectory=/opt/padel/app/app
          ExecStart=/opt/padel/yolo-nas/venv/bin/python -m models.yolo_nas_service
          Restart=always
          RestartSec=10
          Environment="PYTHONPATH=/opt/padel/app/app"
          [Install]
          WantedBy=multi-user.target
          EOL
          
          # Combined Service (Definition remains, but will be disabled)
          sudo tee /etc/systemd/system/combined-service.service > /dev/null << 'EOL'
          [Unit]
          Description=Combined Analysis Service (Targeted for Disabling)
          After=network.target
          [Service]
          User=Towers
          Group=Towers
          WorkingDirectory=/opt/padel/app/app
          ExecStart=/opt/padel/combined/venv/bin/python -m models.combined_service
          Restart=always
          RestartSec=10
          Environment="PYTHONPATH=/opt/padel/app/app"
          [Install]
          WantedBy=multi-user.target
          EOL
          
          # --- Start services and health checks ---
          echo "Reloading systemd and managing services..."
          sudo systemctl daemon-reload
          
          ACTIVE_SERVICES="padel-api yolo11-service yolov8-service mmpose-service yolo-nas-service"
          for service_to_manage in $ACTIVE_SERVICES; do
            echo "Enabling and starting $service_to_manage..."
            sudo systemctl enable $service_to_manage
            sudo systemctl start $service_to_manage
          done
          
          echo "Ensuring combined-service is stopped and disabled..."
          sudo systemctl stop combined-service || true
          sudo systemctl disable combined-service || true
          
          echo "Waiting for services to initialize (30 seconds)..."
          sleep 30
          
          echo "Final Service Status Check:"
          for service_name in $ACTIVE_SERVICES; do
            status=$(systemctl is-active $service_name)
            echo "$service_name: $status"
            if [ "$status" != "active" ]; then
              echo "Error logs for $service_name (last 10 lines):"
              sudo journalctl -u $service_name -n 10 --no-pager --since "3 minutes ago"
            fi
          done
          
          echo "Final Health Check:"
          HEALTH_CHECK_PORTS="8000 8001 8002 8003 8004" 
          for port in $HEALTH_CHECK_PORTS; do
            SERVICE_FOR_PORT_MSG="" 
            if [ "$port" == "8000" ]; then SERVICE_FOR_PORT_MSG="(padel-api)"; fi
            if [ "$port" == "8001" ]; then SERVICE_FOR_PORT_MSG="(yolo11-service)"; fi
            if [ "$port" == "8002" ]; then SERVICE_FOR_PORT_MSG="(yolov8-service)"; fi
            if [ "$port" == "8003" ]; then SERVICE_FOR_PORT_MSG="(mmpose-service)"; fi
            if [ "$port" == "8004" ]; then SERVICE_FOR_PORT_MSG="(yolo-nas-service)"; fi

            if curl -s -f --max-time 10 http://localhost:$port/healthz > /dev/null; then
              echo "✅ Port $port $SERVICE_FOR_PORT_MSG: healthy"
            else
              echo "❌ Port $port $SERVICE_FOR_PORT_MSG: not responding. Service on this port might have an issue."
              SERVICE_NAME_FOR_LOG_CHECK=""
              case "$port" in
                "8000") SERVICE_NAME_FOR_LOG_CHECK="padel-api";;
                "8001") SERVICE_NAME_FOR_LOG_CHECK="yolo11-service";;
                "8002") SERVICE_NAME_FOR_LOG_CHECK="yolov8-service";;
                "8003") SERVICE_NAME_FOR_LOG_CHECK="mmpose-service";;
                "8004") SERVICE_NAME_FOR_LOG_CHECK="yolo-nas-service";;
              esac
              if [ ! -z "$SERVICE_NAME_FOR_LOG_CHECK" ]; then
                echo "Recent logs for $SERVICE_NAME_FOR_LOG_CHECK that might be on port $port:"
                sudo journalctl -u $SERVICE_NAME_FOR_LOG_CHECK -n 10 --no-pager --since "3 minutes ago"
              fi
            fi
          done
          
          echo "🎉 Deployment to VM complete!"

# NuroPadel Docker Compose - Production Deployment
# 5 Isolated AI Services: YOLO Combined, MMPose, YOLO-NAS, RF-DETR, ViTPose++

version: '3.8'

services:
  # === YOLO8 Service (Independent YOLOv8 Detection) ===
  yolo8:
    build:
      context: services/yolo8
      dockerfile: Dockerfile
    image: ghcr.io/stevetowers098/nuro-padel/yolo8:latest
    container_name: nuro-padel-yolo8
    gpus: all
    restart: unless-stopped
    user: "1000:1000"
    ports:
      - "8002:8002"
    volumes:
      - weights:/app/weights:ro
      - services/shared:/app/shared:ro
      - /tmp:/tmp
    environment:
      - PYTHONUNBUFFERED=1
      - YOLO_OFFLINE=1
      - ULTRALYTICS_OFFLINE=1
      - HOME=/tmp
      - TMPDIR=/tmp
      - ONLINE=False
      - YOLO_TELEMETRY=False
      - GOOGLE_APPLICATION_CREDENTIALS=/app/gcp-key.json
      - NVIDIA_VISIBLE_DEVICES=all
      - PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/healthz"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 120s
    networks:
      - nuro-padel-network

  # === YOLO11 Service (Latest Generation Detection) ===
  yolo11:
    build:
      context: services/yolo11
      dockerfile: Dockerfile
    image: ghcr.io/stevetowers098/nuro-padel/yolo11:latest
    container_name: nuro-padel-yolo11
    gpus: all
    restart: unless-stopped
    user: "1000:1000"
    ports:
      - "8007:8007"
    volumes:
      - weights:/app/weights:ro
      - services/shared:/app/shared:ro
      - /tmp:/tmp
    environment:
      - PYTHONUNBUFFERED=1
      - YOLO_OFFLINE=1
      - ULTRALYTICS_OFFLINE=1
      - HOME=/tmp
      - TMPDIR=/tmp
      - ONLINE=False
      - YOLO_TELEMETRY=False
      - GOOGLE_APPLICATION_CREDENTIALS=/app/gcp-key.json
      - NVIDIA_VISIBLE_DEVICES=all
      - PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/healthz"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 120s
    networks:
      - nuro-padel-network

  # === MMPose Biomechanics Service ===
  mmpose:
    build:
      context: services/mmpose
      dockerfile: Dockerfile
    image: ghcr.io/stevetowers098/nuro-padel/mmpose:latest
    container_name: nuro-padel-mmpose
    gpus: all
    restart: unless-stopped
    user: "1000:1000"
    ports:
      - "8003:8003"
    volumes:
      - weights:/app/weights:ro
      - services/mmpose/configs:/app/configs:ro
      - services/mmpose/config:/app/config:ro
      - services/shared:/app/shared:ro
      - /tmp:/tmp
    environment:
      - PYTHONUNBUFFERED=1
      - HOME=/tmp
      - TMPDIR=/tmp
      - MPLCONFIGDIR=/tmp/matplotlib
      - YOLO_OFFLINE=1
      - ULTRALYTICS_OFFLINE=1
      - ONLINE=False
      - YOLO_TELEMETRY=False
      - GOOGLE_APPLICATION_CREDENTIALS=/app/gcp-key.json
      - NVIDIA_VISIBLE_DEVICES=all
      - PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/healthz"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 120s
    networks:
      - nuro-padel-network

  # === YOLO-NAS High-Accuracy Service ===
  yolo-nas:
    build:
      context: services/yolo-nas
      dockerfile: Dockerfile
    image: ghcr.io/stevetowers098/nuro-padel/yolo-nas:latest
    container_name: nuro-padel-yolo-nas
# runtime: nvidia (removed; using gpus: all for Compose V2)
    gpus: all
    restart: unless-stopped
    user: root
    ports:
      - "8004:8004"
    volumes:
      - weights:/app/weights:ro
      - services/yolo-nas/config:/app/config:ro
      - services/shared:/app/shared:ro
      - /tmp:/tmp
    environment:
      - PYTHONUNBUFFERED=1
      - CUDA_VISIBLE_DEVICES=0
      - HOME=/tmp
      - USER=root
      - TMPDIR=/tmp
      - LOGDIR=/tmp
      - SG_LOG_LEVEL=ERROR
      - SUPER_GRADIENTS_LOG_DIR=/tmp/sg_logs
      - YOLO_OFFLINE=1
      - ULTRALYTICS_OFFLINE=1
      - ONLINE=False
      - YOLO_TELEMETRY=False
      - GOOGLE_APPLICATION_CREDENTIALS=/app/gcp-key.json
      - NVIDIA_VISIBLE_DEVICES=all
      - MODEL_CACHE_DIR=/app/weights/super-gradients
      # Model configuration overrides (examples)
      # - YOLO_NAS_S_ENABLED=true
      # - FEATURE_HIGH_ACCURACY_MODE_ENABLED=true
      # - FEATURE_ONNX_OPTIMIZATION_ENABLED=true
      # - FEATURE_TENSORRT_OPTIMIZATION_ENABLED=false
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/healthz"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 120s
    dns:
      - 8.8.8.8
      - 8.8.4.4
    networks:
      - nuro-padel-network

  # === RF-DETR Detection Service ===
  rf-detr:
    build:
      context: services/rf-detr
      dockerfile: Dockerfile
    image: ghcr.io/stevetowers098/nuro-padel/rf-detr:latest
    container_name: nuro-padel-rf-detr
# runtime: nvidia (removed; using gpus: all for Compose V2)
    gpus: all
    restart: unless-stopped
    user: "1000:1000"
    ports:
      - "8005:8005"
    volumes:
      - weights:/app/weights:ro
      - services/rf-detr/config:/app/config:ro
      - services/shared:/app/shared:ro
      - /tmp:/tmp
    environment:
      - PYTHONUNBUFFERED=1
      - HOME=/tmp
      - TMPDIR=/tmp
      - YOLO_OFFLINE=1
      - ULTRALYTICS_OFFLINE=1
      - ONLINE=False
      - YOLO_TELEMETRY=False
      - GOOGLE_APPLICATION_CREDENTIALS=/app/gcp-key.json
      - NVIDIA_VISIBLE_DEVICES=all
      # Model configuration overrides (examples)
      # - RF_DETR_ENABLED=true
      # - FEATURE_FP16_OPTIMIZATION_ENABLED=true
      # - CONFIDENCE_THRESHOLD=0.3
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/healthz"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 120s
    networks:
      - nuro-padel-network

  # === ViTPose++ Advanced Pose Service ===
  vitpose:
    build:
      context: services/vitpose
      dockerfile: Dockerfile
    image: ghcr.io/stevetowers098/nuro-padel/vitpose:latest
    container_name: nuro-padel-vitpose
# runtime: nvidia (removed; using gpus: all for Compose V2)
    gpus: all
    restart: unless-stopped
    user: "1000:1000"
    ports:
      - "8006:8006"
    volumes:
      - weights:/app/weights:ro
      - services/vitpose/config:/app/config:ro
      - services/shared:/app/shared:ro
      - /tmp:/tmp
    environment:
      - PYTHONUNBUFFERED=1
      - HOME=/tmp
      - TMPDIR=/tmp
      - MPLCONFIGDIR=/tmp/matplotlib
      - YOLO_OFFLINE=1
      - ULTRALYTICS_OFFLINE=1
      - ONLINE=False
      - YOLO_TELEMETRY=False
      - GOOGLE_APPLICATION_CREDENTIALS=/app/gcp-key.json
      - NVIDIA_VISIBLE_DEVICES=all
      # Model configuration overrides (examples)
      # - VITPOSE_BASE_ENABLED=true
      # - FEATURE_ADVANCED_POSE_QUALITY_ENABLED=true
      # - FEATURE_JOINT_ANGLE_CALCULATION_ENABLED=true
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/healthz"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 120s
    networks:
      - nuro-padel-network

  # === Nginx Load Balancer & Reverse Proxy ===
  nginx:
    image: nginx:alpine
    container_name: nuro-padel-nginx
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    # Removed hard dependencies to prevent cascading failures
    # Services can start independently
    networks:
      - nuro-padel-network

networks:
  nuro-padel-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.30.0.0/16

volumes:
  weights:
    driver: local
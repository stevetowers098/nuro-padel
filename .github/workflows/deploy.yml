name: Deploy NuroPadel to VM
on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1

    - name: Start VM Instance if Stopped
      run: |
        echo "üîç Checking VM instance status..."
        STATUS=$(gcloud compute instances describe padel-ai \
          --zone=australia-southeast1-a \
          --project=surf-coach \
          --format="value(status)" 2>/dev/null || echo "ERROR")
        
        echo "Current VM status: $STATUS"
        
        if [ "$STATUS" = "TERMINATED" ] || [ "$STATUS" = "STOPPED" ]; then
          echo "üöÄ VM is stopped. Starting instance..."
          gcloud compute instances start padel-ai \
            --zone=australia-southeast1-a \
            --project=surf-coach
          
          echo "‚è≥ Waiting for VM to boot and SSH to be ready..."
          sleep 90
          
          echo "üîó Testing SSH connection..."
          for i in {1..20}; do
            if timeout 15 gcloud compute ssh padel-ai \
              --zone=australia-southeast1-a \
              --project=surf-coach \
              --command="echo 'SSH Ready'" \
              --ssh-flag="-o ConnectTimeout=10" \
              --ssh-flag="-o StrictHostKeyChecking=no" 2>/dev/null; then
              echo "‚úÖ SSH connection ready!"
              break
            fi
            echo "‚è≥ SSH attempt $i/20..."
            sleep 15
          done
          
        elif [ "$STATUS" = "RUNNING" ]; then
          echo "‚úÖ VM is already running"
        else
          echo "‚ö†Ô∏è Unknown VM status: $STATUS, attempting to start..."
          gcloud compute instances start padel-ai \
            --zone=australia-southeast1-a \
            --project=surf-coach || true
          sleep 60
        fi

    - name: Ensure Base App Directories Exist on VM
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.VM_HOST }}
        username: ${{ secrets.VM_USER }}
        key: ${{ secrets.VM_SSH_KEY }}
        timeout: 60s
        command_timeout: 120s
        script: |
          echo "Ensuring base directories for configs and weights exist..."
          mkdir -p /opt/padel/app/configs/body_2d_keypoint/rtmpose/coco
          mkdir -p /opt/padel/app/configs/body_2d_keypoint/topdown_heatmap/coco
          mkdir -p /opt/padel/app/weights
          echo "Base directories ensured."

    - name: Download RTMPose Config
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.VM_HOST }}
        username: ${{ secrets.VM_USER }}
        key: ${{ secrets.VM_SSH_KEY }}
        timeout: 120s
        command_timeout: 180s
        script: |
          echo "Attempting to download RTMPose config..."
          wget -nv -O /opt/padel/app/configs/body_2d_keypoint/rtmpose/coco/rtmpose-m_8xb256-420e_coco-256x192.py https://raw.githubusercontent.com/open-mmlab/mmpose/dev-1.x/configs/body_2d_keypoint/rtmpose/coco/rtmpose-m_8xb256-420e_coco-256x192.py || echo "WARNING: RTMPose config download failed, but continuing."
          echo "RTMPose config download attempt finished."

    - name: Download HRNet Config
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.VM_HOST }}
        username: ${{ secrets.VM_USER }}
        key: ${{ secrets.VM_SSH_KEY }}
        timeout: 120s
        command_timeout: 180s
        script: |
          echo "Attempting to download HRNet config..."
          wget -nv -O /opt/padel/app/configs/body_2d_keypoint/topdown_heatmap/coco/td-hm_hrnet-w48_8xb32-210e_coco-256x192.py https://raw.githubusercontent.com/open-mmlab/mmpose/dev-1.x/configs/body_2d_keypoint/topdown_heatmap/coco/td-hm_hrnet-w48_8xb32-210e_coco-256x192.py || echo "WARNING: HRNet config download failed, but continuing."
          echo "HRNet config download attempt finished."

    - name: Download RTMPose Weights
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.VM_HOST }}
        username: ${{ secrets.VM_USER }}
        key: ${{ secrets.VM_SSH_KEY }}
        timeout: 300s
        command_timeout: 360s
        script: |
          echo "Attempting to download RTMPose weights..."
          wget -nv -O /opt/padel/app/weights/rtmpose-m_simcc-aic-coco_pt-aic-coco_420e-256x192-63eb25f7_20230126.pth https://download.openmmlab.com/mmpose/v1/projects/rtmpose/rtmpose-m_simcc-aic-coco_pt-aic-coco_420e-256x192-63eb25f7_20230126.pth || echo "WARNING: RTMPose weights download failed, but continuing."
          echo "RTMPose weights download attempt finished."

    - name: Download HRNet Weights
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.VM_HOST }}
        username: ${{ secrets.VM_USER }}
        key: ${{ secrets.VM_SSH_KEY }}
        timeout: 300s
        command_timeout: 360s
        script: |
          echo "Attempting to download HRNet weights..."
          wget -nv -O /opt/padel/app/weights/hrnet_w48_coco_256x192-b9e0b3ab_20200708.pth https://download.openmmlab.com/mmpose/top_down/hrnet/hrnet_w48_coco_256x192-b9e0b3ab_20200708.pth || echo "WARNING: HRNet weights download failed, but continuing."
          echo "HRNet weights download attempt finished."

    - name: Download YOLOv8 Model
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.VM_HOST }}
        username: ${{ secrets.VM_USER }}
        key: ${{ secrets.VM_SSH_KEY }}
        timeout: 300s
        command_timeout: 360s
        script: |
          if [ ! -f "/opt/padel/app/weights/yolov8m.pt" ]; then
            echo "Downloading YOLOv8 model..."
            wget -O /opt/padel/app/weights/yolov8m.pt https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8m.pt
          else
            echo "‚úÖ YOLOv8 model already exists"
          fi

    - name: Deploy Application Code and Setup Environments
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.VM_HOST }}
        username: ${{ secrets.VM_USER }}
        key: ${{ secrets.VM_SSH_KEY }}
        timeout: 900s
        command_timeout: 900s
        script: |
          echo "Stopping services..."
          sudo systemctl stop padel-api yolo11-service yolov8-service mmpose-service combined-service || true
          
          echo "Updating code in /opt/padel/app ..."
          cd /opt/padel

          if [ -d "app_old_backup" ]; then rm -rf app_old_backup; fi
          if [ -d "app_current_backup" ]; then mv app_current_backup app_old_backup || true; fi
          if [ -d "app" ]; then 
            echo "Preserving weights directory before moving app..."
            if [ -d "app/weights" ]; then
              mv app/weights weights_backup_$$
            fi
            mv app app_current_backup || true
          fi

          echo "Cloning repository into /opt/padel/app ..."
          git clone https://github.com/stevetowers098/nuro-padel.git app

          # Restore weights if backup exists
          if [ -d "weights_backup_$$" ]; then
            echo "Restoring preserved weights directory..."
            rm -rf app/weights
            mv weights_backup_$$ app/weights
          fi
          
          echo "Copying requirements files..."
          if [ -d "/opt/padel/app/requirements" ]; then
            cp -r /opt/padel/app/requirements /opt/padel/
          else
            echo "WARNING: /opt/padel/app/requirements directory not found after clone."
          fi
          if [ -f "/opt/padel/app/requirements.txt" ]; then
            cp /opt/padel/app/requirements.txt /opt/padel/
          else
            echo "WARNING: /opt/padel/app/requirements.txt file not found after clone."
          fi
          
          echo "Updating shared environment (/opt/padel/shared/venv)..."
          cd /opt/padel/shared
          if [ ! -d "venv" ]; then echo "Creating venv for shared"; python3 -m venv venv; fi
          source venv/bin/activate
          pip install --upgrade pip setuptools --quiet --no-cache-dir
          if [ -f "/opt/padel/requirements.txt" ]; then
            pip install -r /opt/padel/requirements.txt --quiet --no-cache-dir
          else
            echo "WARNING: /opt/padel/requirements.txt not found for shared venv."
            pip install fastapi uvicorn pydantic httpx python-multipart google-cloud-storage google-cloud-compute --quiet --no-cache-dir
          fi
          deactivate
          
          echo "Updating YOLO environment..."
          cd /opt/padel/yolo
          if [ ! -d "venv" ]; then echo "Creating venv for yolo"; python3 -m venv venv; fi
          source venv/bin/activate
          pip install --upgrade pip setuptools --quiet --no-cache-dir
          if [ -f "/opt/padel/requirements/yolo.txt" ]; then
            pip install -r /opt/padel/requirements/yolo.txt --quiet --no-cache-dir 
          else
            echo "WARNING: /opt/padel/requirements/yolo.txt not found!"
          fi
          deactivate
          
          echo "Updating MMPose environment..."
          cd /opt/padel/mmpose
          if [ ! -d "venv" ]; then echo "Creating venv for mmpose"; python3 -m venv venv; fi
          source venv/bin/activate
          pip install --upgrade pip --quiet --no-cache-dir
          pip install setuptools==60.2.0 --quiet --no-cache-dir
          echo "Aggressively uninstalling torch, torchvision, torchaudio, triton, openxlab before reinstall for MMPose..."
          pip uninstall openxlab torch torchvision torchaudio triton -y --quiet || true 
          echo "Installing PyTorch for MMPose (CUDA 11.8) with --no-cache-dir..."
          pip install --no-cache-dir torch==2.0.1 --index-url https://download.pytorch.org/whl/cu118 torchvision==0.15.2 --index-url https://download.pytorch.org/whl/cu118 torchaudio==2.0.2 --index-url https://download.pytorch.org/whl/cu118 --quiet
          echo "Installing OpenMIM for MMPose..."
          pip install --no-cache-dir openmim --quiet
          echo "Verifying PyTorch installation before MIM for MMPose..."
          python -c "import torch; print(f'PyTorch version for MIM in MMPose env: {torch.__version__}')" || echo "ERROR: PyTorch check failed in MMPose env!"
          echo "Installing MMCV via MIM for MMPose..."
          mim install mmcv==2.0.1 --quiet 
          echo "Verifying MMCV installation for MMPose..."
          python -c "import mmcv; print(f'MMCV version for MMPose env: {mmcv.__version__}'); from mmcv.ops import MultiScaleDeformableAttention; print('MultiScaleDeformableAttention imported successfully from mmcv.ops')" || echo "ERROR: MMCV (full) verification failed in MMPose env!"
          echo "Installing other MMPose dependencies from requirements/mmpose.txt..."
          if [ -f "/opt/padel/requirements/mmpose.txt" ]; then
            pip install --no-cache-dir -r /opt/padel/requirements/mmpose.txt --quiet 
          else
            echo "WARNING: /opt/padel/requirements/mmpose.txt not found!"
          fi
          deactivate
          
          echo "Updating YOLO-NAS environment..."
          cd /opt/padel/yolo-nas
          if [ ! -d "venv" ]; then echo "Creating venv for yolo-nas"; python3 -m venv venv; fi
          source venv/bin/activate
          pip install --upgrade pip setuptools --quiet --no-cache-dir
          if [ -f "/opt/padel/requirements/yolo-nas.txt" ]; then
            pip install -r /opt/padel/requirements/yolo-nas.txt --quiet --no-cache-dir 
          else
            echo "WARNING: /opt/padel/requirements/yolo-nas.txt not found!"
          fi
          deactivate
          
          echo "Creating/Updating systemd service files with GPU management support..."

          sudo tee /etc/systemd/system/padel-api.service > /dev/null << 'EOL'
          [Unit]
          Description=NuroPadel Main API Gateway with GPU Auto-Management
          After=network.target
          [Service]
          User=Towers
          Group=Towers
          WorkingDirectory=/opt/padel/app/app
          ExecStart=/opt/padel/shared/venv/bin/python main.py
          Restart=always
          RestartSec=10
          Environment="PYTHONPATH=/opt/padel/app/app"
          Environment="GOOGLE_CLOUD_PROJECT=surf-coach"
          [Install]
          WantedBy=multi-user.target
          EOL
          
          sudo tee /etc/systemd/system/yolo11-service.service > /dev/null << 'EOL'
          [Unit]
          Description=YOLOv11 Pose and Object Detection Service
          After=network.target
          [Service]
          User=Towers
          Group=Towers
          WorkingDirectory=/opt/padel/app/app
          ExecStart=/opt/padel/yolo/venv/bin/python -m models.yolo11_service
          Restart=always
          RestartSec=10
          Environment="PYTHONPATH=/opt/padel/app/app"
          [Install]
          WantedBy=multi-user.target
          EOL
          
          sudo tee /etc/systemd/system/yolov8-service.service > /dev/null << 'EOL'
          [Unit]
          Description=YOLOv8 Object Detection Service
          After=network.target
          [Service]
          User=Towers
          Group=Towers
          WorkingDirectory=/opt/padel/app/app
          ExecStart=/opt/padel/yolo/venv/bin/python -m models.yolov8_service
          Restart=always
          RestartSec=10
          Environment="PYTHONPATH=/opt/padel/app/app"
          [Install]
          WantedBy=multi-user.target
          EOL
          
          sudo tee /etc/systemd/system/mmpose-service.service > /dev/null << 'EOL'
          [Unit]
          Description=MMPose Pose Estimation Service
          After=network.target
          [Service]
          User=Towers
          Group=Towers
          WorkingDirectory=/opt/padel/app/app
          ExecStart=/opt/padel/mmpose/venv/bin/python -m models.mmpose_service
          Restart=always
          RestartSec=10
          Environment="PYTHONPATH=/opt/padel/app/app"
          Environment="CUDA_HOME=/usr/local/cuda-11.8" 
          [Install]
          WantedBy=multi-user.target
          EOL
          
          sudo tee /etc/systemd/system/yolo-nas-service.service > /dev/null << 'EOL'
          [Unit]
          Description=YOLO-NAS Object Detection Service
          After=network.target
          [Service]
          User=Towers
          Group=Towers
          WorkingDirectory=/opt/padel/app/app
          ExecStart=/opt/padel/yolo-nas/venv/bin/python -m models.yolo_nas_service
          Restart=always
          RestartSec=10
          Environment="PYTHONPATH=/opt/padel/app/app"
          [Install]
          WantedBy=multi-user.target
          EOL
          
          echo "Reloading systemd and managing services..."
          sudo systemctl daemon-reload
          
          ACTIVE_SERVICES="padel-api yolo11-service yolov8-service mmpose-service yolo-nas-service"
          for service_to_manage in $ACTIVE_SERVICES; do
            echo "Enabling and starting $service_to_manage..."
            sudo systemctl enable $service_to_manage
            sudo systemctl start $service_to_manage
          done
          
          echo "Ensuring combined-service is stopped and disabled..."
          sudo systemctl stop combined-service || true
          sudo systemctl disable combined-service || true
          
          echo "Waiting for services to initialize (30 seconds)..."
          sleep 30
          
          echo "Final Service Status Check:"
          for service_name in $ACTIVE_SERVICES; do
            status=$(systemctl is-active $service_name)
            echo "$service_name: $status"
            if [ "$status" != "active" ]; then
              echo "Error logs for $service_name (last 10 lines, last 3 mins):"
              sudo journalctl -u $service_name -n 10 --no-pager --since "3 minutes ago"
            fi
          done
          
          echo "Final Health Check:"
          HEALTH_CHECK_PORTS="8000 8001 8002 8003 8004" 
          for port in $HEALTH_CHECK_PORTS; do
            SERVICE_FOR_PORT_MSG="" 
            if [ "$port" == "8000" ]; then SERVICE_FOR_PORT_MSG="(padel-api with GPU auto-management)"; fi
            if [ "$port" == "8001" ]; then SERVICE_FOR_PORT_MSG="(yolo11-service)"; fi
            if [ "$port" == "8002" ]; then SERVICE_FOR_PORT_MSG="(yolov8-service)"; fi
            if [ "$port" == "8003" ]; then SERVICE_FOR_PORT_MSG="(mmpose-service)"; fi
            if [ "$port" == "8004" ]; then SERVICE_FOR_PORT_MSG="(yolo-nas-service)"; fi

            if curl -s -f --max-time 10 http://localhost:$port/healthz > /dev/null; then
              echo "‚úÖ Port $port $SERVICE_FOR_PORT_MSG: healthy"
            else
              echo "‚ùå Port $port $SERVICE_FOR_PORT_MSG: not responding"
            fi
          done
          
          echo "üéâ Deployment complete! VM auto-start/stop now enabled."

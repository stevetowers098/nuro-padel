name: 🧠 Smart Deployment - Only Changed Services

on:
  push:
    branches: [ main, develop, docker-containers ]
    paths:
      - 'yolo-combined-service/**'
      - 'mmpose-service/**'
      - 'yolo-nas-service/**'
      - 'docker-compose*.yml'
      - 'nginx.conf'
      - '.github/workflows/smart-deploy.yml'
  
  workflow_dispatch:
    inputs:
      force_services:
        description: 'Force rebuild services (comma-separated or "all")'
        required: false
        default: ''
        type: string
      deploy_environment:
        description: 'Deployment environment'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - production
      skip_health_checks:
        description: 'Skip health checks (faster but risky)'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}/nuro-padel

jobs:
  detect-changes:
    name: 🔍 Detect Service Changes
    runs-on: ubuntu-latest
    outputs:
      yolo-combined: ${{ steps.changes.outputs.yolo-combined }}
      mmpose: ${{ steps.changes.outputs.mmpose }}
      yolo-nas: ${{ steps.changes.outputs.yolo-nas }}
      nginx: ${{ steps.changes.outputs.nginx }}
      any-changes: ${{ steps.changes.outputs.any-changes }}
      changed-services: ${{ steps.changes.outputs.changed-services }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for git diff
      
      - name: 🔍 Analyze Changes
        id: changes
        run: |
          echo "🔍 Analyzing file changes since last commit..."
          
          # Handle manual force rebuild
          if [[ -n "${{ github.event.inputs.force_services }}" ]]; then
            force_services="${{ github.event.inputs.force_services }}"
            echo "🔧 Manual force rebuild requested: $force_services"
            
            if [[ "$force_services" == "all" ]]; then
              echo "yolo-combined=true" >> $GITHUB_OUTPUT
              echo "mmpose=true" >> $GITHUB_OUTPUT  
              echo "yolo-nas=true" >> $GITHUB_OUTPUT
              echo "nginx=true" >> $GITHUB_OUTPUT
              echo "any-changes=true" >> $GITHUB_OUTPUT
              echo "changed-services=yolo-combined,mmpose,yolo-nas,nginx" >> $GITHUB_OUTPUT
              echo "🔄 FORCED: All services will be rebuilt"
              exit 0
            else
              # Parse comma-separated services
              IFS=',' read -ra SERVICES <<< "$force_services"
              changed_services=""
              for service in "${SERVICES[@]}"; do
                service=$(echo "$service" | xargs)  # trim whitespace
                echo "${service}=true" >> $GITHUB_OUTPUT
                if [[ -n "$changed_services" ]]; then
                  changed_services="$changed_services,$service"
                else
                  changed_services="$service"
                fi
                echo "🔄 FORCED: $service will be rebuilt"
              done
              echo "any-changes=true" >> $GITHUB_OUTPUT
              echo "changed-services=$changed_services" >> $GITHUB_OUTPUT
              exit 0
            fi
          fi
          
          # Detect changes using git diff
          if [[ "${{ github.event_name }}" == "push" ]]; then
            # Compare with previous commit
            base_commit="${{ github.event.before }}"
            if [[ "$base_commit" == "0000000000000000000000000000000000000000" ]]; then
              # First commit, check all
              base_commit="HEAD~1"
            fi
          else
            # Compare with main branch
            base_commit="origin/main"
          fi
          
          echo "📊 Comparing against: $base_commit"
          
          # Check each service directory
          yolo_combined_changed=false
          mmpose_changed=false
          yolo_nas_changed=false
          nginx_changed=false
          
          if git diff --name-only "$base_commit" HEAD | grep -q "^yolo-combined-service/"; then
            yolo_combined_changed=true
            echo "📝 yolo-combined-service/ has changes"
          fi
          
          if git diff --name-only "$base_commit" HEAD | grep -q "^mmpose-service/"; then
            mmpose_changed=true
            echo "📝 mmpose-service/ has changes"
          fi
          
          if git diff --name-only "$base_commit" HEAD | grep -q "^yolo-nas-service/"; then
            yolo_nas_changed=true
            echo "📝 yolo-nas-service/ has changes"
          fi
          
          if git diff --name-only "$base_commit" HEAD | grep -q -E "^(docker-compose.*\.yml|nginx\.conf)"; then
            nginx_changed=true
            echo "📝 Infrastructure files changed"
          fi
          
          # Set outputs
          echo "yolo-combined=$yolo_combined_changed" >> $GITHUB_OUTPUT
          echo "mmpose=$mmpose_changed" >> $GITHUB_OUTPUT
          echo "yolo-nas=$yolo_nas_changed" >> $GITHUB_OUTPUT
          echo "nginx=$nginx_changed" >> $GITHUB_OUTPUT
          
          # Build changed services list
          changed_services=""
          any_changes=false
          
          if [[ "$yolo_combined_changed" == "true" ]]; then
            changed_services="yolo-combined"
            any_changes=true
          fi
          
          if [[ "$mmpose_changed" == "true" ]]; then
            if [[ -n "$changed_services" ]]; then
              changed_services="$changed_services,mmpose"
            else
              changed_services="mmpose"
            fi
            any_changes=true
          fi
          
          if [[ "$yolo_nas_changed" == "true" ]]; then
            if [[ -n "$changed_services" ]]; then
              changed_services="$changed_services,yolo-nas"
            else
              changed_services="yolo-nas"
            fi
            any_changes=true
          fi
          
          if [[ "$nginx_changed" == "true" ]]; then
            if [[ -n "$changed_services" ]]; then
              changed_services="$changed_services,nginx"
            else
              changed_services="nginx"
            fi
            any_changes=true
          fi
          
          echo "any-changes=$any_changes" >> $GITHUB_OUTPUT
          echo "changed-services=$changed_services" >> $GITHUB_OUTPUT
          
          if [[ "$any_changes" == "true" ]]; then
            echo "✅ Services to rebuild: $changed_services"
          else
            echo "ℹ️  No service changes detected"
          fi

  build-and-deploy:
    name: 🚀 Smart Build & Deploy
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.any-changes == 'true'
    
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: 🏷️ Generate Image Tags
        id: tags
        run: |
          # Generate unique tags for this build
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          
          echo "short-sha=$SHORT_SHA" >> $GITHUB_OUTPUT
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
          echo "tag-suffix=$SHORT_SHA-$TIMESTAMP" >> $GITHUB_OUTPUT
      
      - name: 🐳 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 🔨 Build Changed Services
        run: |
          echo "🔨 Building only changed services..."
          changed_services="${{ needs.detect-changes.outputs.changed-services }}"
          tag_suffix="${{ steps.tags.outputs.tag-suffix }}"
          
          IFS=',' read -ra SERVICES <<< "$changed_services"
          
          for service in "${SERVICES[@]}"; do
            service=$(echo "$service" | xargs)  # trim whitespace
            
            if [[ "$service" == "nginx" ]]; then
              echo "⏭️  Skipping nginx build (uses base image)"
              continue
            fi
            
            echo "🔨 Building $service..."
            
            # Determine environment
            if [[ "${{ github.event.inputs.deploy_environment }}" == "production" ]]; then
              dockerfile="Dockerfile"
            else
              dockerfile="Dockerfile.dev"
            fi
            
            # Build the service
            docker build \
              -t "${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${service}:${tag_suffix}" \
              -t "${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${service}:latest" \
              -f "${service}-service/${dockerfile}" \
              "${service}-service/"
            
            # Push images
            docker push "${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${service}:${tag_suffix}"
            docker push "${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${service}:latest"
            
            echo "✅ Built and pushed $service"
          done
          
          echo "📦 All changed services built successfully"
      
      - name: 📦 Create Deployment Package
        run: |
          echo "📦 Creating deployment package..."
          
          # Create deployment directory
          mkdir -p deployment
          
          # Copy necessary files
          cp docker-compose*.yml deployment/
          cp nginx.conf deployment/
          
          # Create deployment script
          cat > deployment/deploy-smart.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "🚀 Smart Deployment Starting..."
          
          # Colors
          GREEN='\033[0;32m'
          BLUE='\033[0;34m'
          YELLOW='\033[1;33m'
          RED='\033[0;31m'
          NC='\033[0m'
          
          print_status() { echo -e "${BLUE}[INFO]${NC} $1"; }
          print_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
          print_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
          print_error() { echo -e "${RED}[ERROR]${NC} $1"; }
          
          # Get parameters
          CHANGED_SERVICES="$1"
          TAG_SUFFIX="$2"
          SKIP_HEALTH_CHECKS="$3"
          
          print_status "Services to deploy: $CHANGED_SERVICES"
          print_status "Image tag: $TAG_SUFFIX"
          
          # Backup current state for rollback
          print_status "🔄 Creating backup for rollback capability..."
          docker-compose ps > .deployment-backup.state 2>/dev/null || true
          
          # Deploy each service
          IFS=',' read -ra SERVICES <<< "$CHANGED_SERVICES"
          
          deployed_services=()
          failed_services=()
          
          for service in "${SERVICES[@]}"; do
            service=$(echo "$service" | xargs)
            
            print_status "🚀 Deploying $service..."
            
            # Stop the service
            docker-compose stop "$service" 2>/dev/null || true
            
            # Update image tag if not nginx
            if [[ "$service" != "nginx" ]]; then
              # Pull new image
              docker pull "ghcr.io/stevetowers098/nuro-padel/${service}:${TAG_SUFFIX}" || {
                print_error "❌ Failed to pull image for $service"
                failed_services+=("$service")
                continue
              }
              
              # Tag as latest for docker-compose
              docker tag "ghcr.io/stevetowers098/nuro-padel/${service}:${TAG_SUFFIX}" \
                        "ghcr.io/stevetowers098/nuro-padel/${service}:latest"
            fi
            
            # Start the service
            docker-compose up -d "$service"
            
            deployed_services+=("$service")
            print_success "✅ $service deployed"
          done
          
          if [[ ${#failed_services[@]} -gt 0 ]]; then
            print_error "❌ Some services failed to deploy: ${failed_services[*]}"
            exit 1
          fi
          
          # Health checks
          if [[ "$SKIP_HEALTH_CHECKS" != "true" ]]; then
            print_status "🩺 Performing health checks..."
            
            sleep 15  # Give services time to start
            
            for service in "${deployed_services[@]}"; do
              case "$service" in
                "yolo-combined") port="8001" ;;
                "mmpose") port="8003" ;;
                "yolo-nas") port="8004" ;;
                "nginx") port="8080" ;;
                *) continue ;;
              esac
              
              print_status "🩺 Checking $service health on port $port..."
              
              # Try health check with retries
              max_attempts=6
              attempt=1
              
              while [[ $attempt -le $max_attempts ]]; do
                if curl -f -s "http://localhost:${port}/healthz" >/dev/null 2>&1; then
                  print_success "✅ $service is healthy"
                  break
                elif [[ $attempt -eq $max_attempts ]]; then
                  print_error "❌ $service failed health check after $max_attempts attempts"
                  
                  # Rollback failed service
                  print_warning "🔄 Rolling back $service..."
                  docker-compose restart "$service"
                  
                  failed_services+=("$service")
                else
                  print_status "⏳ Health check attempt $attempt/$max_attempts for $service..."
                  sleep 10
                  ((attempt++))
                fi
              done
            done
            
            if [[ ${#failed_services[@]} -gt 0 ]]; then
              print_error "❌ Health checks failed for: ${failed_services[*]}"
              print_error "🔄 Consider manual rollback if needed"
              exit 1
            fi
          fi
          
          print_success "🎉 Smart deployment completed successfully!"
          print_success "📊 Deployed services: ${deployed_services[*]}"
          EOF
          
          chmod +x deployment/deploy-smart.sh
          
          # Create archive
          tar -czf deployment-package.tar.gz deployment/
          
          echo "✅ Deployment package created"
      
      - name: 🚀 Deploy to VM
        run: |
          echo "🚀 Deploying to remote VM..."
          
          # Setup SSH
          mkdir -p ~/.ssh
          echo "${{ secrets.VM_SSH_KEY }}" > ~/.ssh/vm_key
          chmod 600 ~/.ssh/vm_key
          ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts
          
          # Copy deployment package
          scp -i ~/.ssh/vm_key deployment-package.tar.gz \
              ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:~/
          
          # Execute smart deployment
          ssh -i ~/.ssh/vm_key ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << EOF
            set -e
            
            echo "📦 Extracting deployment package..."
            tar -xzf deployment-package.tar.gz
            cd deployment
            
            echo "🚀 Executing smart deployment..."
            ./deploy-smart.sh \
              "${{ needs.detect-changes.outputs.changed-services }}" \
              "${{ steps.tags.outputs.tag-suffix }}" \
              "${{ github.event.inputs.skip_health_checks }}"
          EOF
          
          echo "✅ Smart deployment completed on VM"
      
      - name: 📊 Deployment Summary
        if: always()
        run: |
          echo "## 📊 Smart Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Changed Services:** ${{ needs.detect-changes.outputs.changed-services }}" >> $GITHUB_STEP_SUMMARY
          echo "**Image Tag:** ${{ steps.tags.outputs.tag-suffix }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.deploy_environment || 'development' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ⚡ Performance Benefits" >> $GITHUB_STEP_SUMMARY
          echo "- 🎯 **Selective Building:** Only changed services rebuilt" >> $GITHUB_STEP_SUMMARY
          echo "- 🚀 **Faster Deployment:** ~5 minutes vs 30+ minutes" >> $GITHUB_STEP_SUMMARY
          echo "- 🛡️ **Zero Downtime:** Unchanged services kept running" >> $GITHUB_STEP_SUMMARY
          echo "- 🩺 **Health Checks:** Automated service verification" >> $GITHUB_STEP_SUMMARY

  no-changes:
    name: ℹ️ No Changes Detected
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.any-changes != 'true'
    
    steps:
      - name: ℹ️ No Deployment Needed
        run: |
          echo "ℹ️ No service changes detected - skipping deployment"
          echo "## ℹ️ No Changes Detected" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "No changes were detected in service directories:" >> $GITHUB_STEP_SUMMARY
          echo "- `yolo-combined-service/`" >> $GITHUB_STEP_SUMMARY
          echo "- `mmpose-service/`" >> $GITHUB_STEP_SUMMARY
          echo "- `yolo-nas-service/`" >> $GITHUB_STEP_SUMMARY
          echo "- `docker-compose*.yml`" >> $GITHUB_STEP_SUMMARY
          echo "- `nginx.conf`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Result:** All services remain unchanged and running"
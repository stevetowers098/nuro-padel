name: Deploy NuroPadel to VM
on:
  push:
    branches: [main]
jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to VM
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.VM_HOST }}
        username: ${{ secrets.VM_USER }}
        key: ${{ secrets.VM_SSH_KEY }}
        script: |
          # Stop all services
          echo "Stopping services..."
          sudo systemctl stop padel-api yolo11-service yolov8-service mmpose-service yolo-nas-service combined-service || true
          
          # Update code
          echo "Updating code..."
          cd /opt/padel
          
          if [ -d "app" ]; then
            mv app app_backup_$(date +%Y%m%d_%H%M%S)
          fi
          
          git clone https://github.com/stevetowers098/nuro-padel.git temp
          mkdir -p app
          
          cp -r temp/app/* app/
          cp -r temp/requirements .
          cp temp/requirements.txt .
          
          rm -rf temp
          
          # Update shared environment
          echo "Updating shared environment..."
          cd /opt/padel/shared
          source venv/bin/activate
          pip install --upgrade pip setuptools --quiet --no-cache-dir
          pip install fastapi uvicorn pydantic httpx python-multipart google-cloud-storage --quiet --no-cache-dir
          deactivate
          
          # Update YOLO environment
          echo "Updating YOLO environment..."
          cd /opt/padel/yolo
          source venv/bin/activate
          pip install --upgrade pip setuptools --quiet --no-cache-dir
          pip install -r ../requirements/yolo.txt --quiet --no-cache-dir
          deactivate
          
          # Update MMPose environment with memory optimizations
          echo "Updating MMPose environment..."
          cd /opt/padel/mmpose
          source venv/bin/activate
          
          pip install --upgrade pip setuptools --quiet --no-cache-dir
          
          # Remove any existing conflicting packages
          pip uninstall mmcv mmcv-lite mmcv-full torch torchvision torchaudio -y --quiet || true
          
          # Install PyTorch components one by one
          echo "Installing PyTorch..."
          pip install torch==2.0.1 --index-url https://download.pytorch.org/whl/cu118 --quiet --no-cache-dir
          echo "Installing TorchVision..."
          pip install torchvision==0.15.2 --index-url https://download.pytorch.org/whl/cu118 --quiet --no-cache-dir
          echo "Installing TorchAudio..."
          pip install torchaudio==2.0.2 --index-url https://download.pytorch.org/whl/cu118 --quiet --no-cache-dir
          
          echo "Installing OpenMIM..."
          pip install openmim --quiet --no-cache-dir
          
          echo "Installing MMCV via MIM..."
          mim install mmcv==2.0.1 --quiet
          
          echo "Installing mmpose and mmdet..."
          pip install mmpose mmdet --quiet --no-cache-dir
          echo "Installing CV and supervision libraries..."
          pip install opencv-python supervision --quiet --no-cache-dir
          echo "Installing API and GCS libraries..."
          pip install fastapi uvicorn pydantic httpx python-multipart google-cloud-storage --quiet --no-cache-dir
          
          deactivate
          
          # Update YOLO-NAS environment
          echo "Updating YOLO-NAS environment..."
          cd /opt/padel/yolo-nas
          source venv/bin/activate
          pip install --upgrade pip setuptools --quiet --no-cache-dir
          pip install -r ../requirements/yolo-nas.txt --quiet --no-cache-dir
          deactivate
          
          # Update Combined environment
          echo "Updating Combined environment..."
          cd /opt/padel/combined
          source venv/bin/activate
          pip install --upgrade pip setuptools --quiet --no-cache-dir
          pip install -r ../requirements/yolo.txt --quiet --no-cache-dir
          deactivate
          
          cd /opt/padel
          
          # Create service files
          echo "Creating service files..."
          # Main API Service
          sudo tee /etc/systemd/system/padel-api.service > /dev/null << 'EOL'
          [Unit]
          Description=NuroPadel Main API
          After=network.target
          [Service]
          User=Towers
          Group=Towers
          WorkingDirectory=/opt/padel/app
          ExecStart=/opt/padel/shared/venv/bin/python main.py
          Restart=always
          RestartSec=10
          Environment="PYTHONPATH=/opt/padel/app"
          [Install]
          WantedBy=multi-user.target
          EOL
          
          # YOLO11 Service
          sudo tee /etc/systemd/system/yolo11-service.service > /dev/null << 'EOL'
          [Unit]
          Description=YOLO11 Pose Service
          After=network.target
          [Service]
          User=Towers
          Group=Towers
          WorkingDirectory=/opt/padel/app
          ExecStart=/opt/padel/yolo/venv/bin/python -m models.yolo11_service
          Restart=always
          RestartSec=10
          Environment="PYTHONPATH=/opt/padel/app"
          [Install]
          WantedBy=multi-user.target
          EOL
          
          # YOLOv8 Service
          sudo tee /etc/systemd/system/yolov8-service.service > /dev/null << 'EOL'
          [Unit]
          Description=YOLOv8 Detection Service
          After=network.target
          [Service]
          User=Towers
          Group=Towers
          WorkingDirectory=/opt/padel/app
          ExecStart=/opt/padel/yolo/venv/bin/python -m models.yolov8_service
          Restart=always
          RestartSec=10
          Environment="PYTHONPATH=/opt/padel/app"
          [Install]
          WantedBy=multi-user.target
          EOL
          
          # MMPose Service
          sudo tee /etc/systemd/system/mmpose-service.service > /dev/null << 'EOL'
          [Unit]
          Description=MMPose Service
          After=network.target
          [Service]
          User=Towers
          Group=Towers
          WorkingDirectory=/opt/padel/app
          ExecStart=/opt/padel/mmpose/venv/bin/python -m models.mmpose_service
          Restart=always
          RestartSec=10
          Environment="PYTHONPATH=/opt/padel/app"
          Environment="CUDA_HOME=/usr/local/cuda-11.8"
          [Install]
          WantedBy=multi-user.target
          EOL
          
          # YOLO-NAS Service
          sudo tee /etc/systemd/system/yolo-nas-service.service > /dev/null << 'EOL'
          [Unit]
          Description=YOLO-NAS Pose Service
          After=network.target
          [Service]
          User=Towers
          Group=Towers
          WorkingDirectory=/opt/padel/app
          ExecStart=/opt/padel/yolo-nas/venv/bin/python -m models.yolo_nas_service
          Restart=always
          RestartSec=10
          Environment="PYTHONPATH=/opt/padel/app"
          [Install]
          WantedBy=multi-user.target
          EOL
          
          # Combined Service
          sudo tee /etc/systemd/system/combined-service.service > /dev/null << 'EOL'
          [Unit]
          Description=Combined Analysis Service
          After=network.target
          [Service]
          User=Towers
          Group=Towers
          WorkingDirectory=/opt/padel/app
          ExecStart=/opt/padel/combined/venv/bin/python -m models.combined_service
          Restart=always
          RestartSec=10
          Environment="PYTHONPATH=/opt/padel/app"
          [Install]
          WantedBy=multi-user.target
          EOL
          
          # Start services
          echo "Starting services..."
          sudo systemctl daemon-reload
          sudo systemctl enable padel-api yolo11-service yolov8-service mmpose-service yolo-nas-service combined-service
          sudo systemctl start padel-api yolo11-service yolov8-service mmpose-service yolo-nas-service combined-service
          
          # Wait and verify
          echo "Waiting for services..."
          sleep 30
          
          echo "Service Status:"
          for service in padel-api yolo11-service yolov8-service mmpose-service yolo-nas-service combined-service; do
            status=$(systemctl is-active $service)
            echo "$service: $status"
            if [ "$status" != "active" ]; then
              echo "Logs for $service:"
              sudo journalctl -u $service -n 5 --no-pager
            fi
          done
          
          echo "Health Check:"
          for port in 8000 8001 8002 8003 8004 8005; do
            if curl -s -f http://localhost:$port/healthz > /dev/null; then
              echo "✅ Port $port: healthy"
            else
              echo "❌ Port $port: not responding"
            fi
          done
          
          echo "🎉 Deployment complete! Models will download on first use."

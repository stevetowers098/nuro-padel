# NuroPadel Nginx Configuration - Load Balancer & Reverse Proxy
# Routes traffic to 5 Docker services with health checks

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Increase timeouts for AI processing
    proxy_connect_timeout 300s;
    proxy_send_timeout 300s;
    proxy_read_timeout 300s;
    client_max_body_size 100M;

    # Upstream services with health checks
    upstream yolo_combined {
        server yolo-combined:8001 max_fails=3 fail_timeout=30s;
    }
    
    upstream mmpose {
        server mmpose:8003 max_fails=3 fail_timeout=30s;
    }
    
    upstream yolo_nas {
        server yolo-nas:8004 max_fails=3 fail_timeout=30s;
    }
    
    upstream rf_detr {
        server rf-detr:8005 max_fails=3 fail_timeout=30s;
    }
    
    upstream vitpose {
        server vitpose:8006 max_fails=3 fail_timeout=30s;
    }

    # Main server block
    server {
        listen 80;
        server_name localhost padel-ai.com *.padel-ai.com;

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # === YOLO Combined Service Routes ===
        location ~ ^/(yolo11|yolov8)/ {
            proxy_pass http://yolo_combined;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Add response headers
            add_header X-Service "yolo-combined" always;
            add_header X-Container "nuro-padel-yolo-combined" always;
        }

        # YOLO Combined health check
        location /yolo-combined/healthz {
            proxy_pass http://yolo_combined/healthz;
            proxy_set_header Host $host;
            add_header X-Service "yolo-combined" always;
        }

        # === MMPose Service Routes ===
        location /mmpose/ {
            proxy_pass http://mmpose;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Add response headers
            add_header X-Service "mmpose" always;
            add_header X-Container "nuro-padel-mmpose" always;
        }

        # MMPose health check
        location /mmpose/healthz {
            proxy_pass http://mmpose/healthz;
            proxy_set_header Host $host;
            add_header X-Service "mmpose" always;
        }

        # === YOLO-NAS Service Routes ===
        location /yolo-nas/ {
            proxy_pass http://yolo_nas;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Add response headers
            add_header X-Service "yolo-nas" always;
            add_header X-Container "nuro-padel-yolo-nas" always;
        }

        # YOLO-NAS health check
        location /yolo-nas/healthz {
            proxy_pass http://yolo_nas/healthz;
            proxy_set_header Host $host;
            add_header X-Service "yolo-nas" always;
        }

        # === RF-DETR Service Routes ===
        location /rf-detr/ {
            proxy_pass http://rf_detr/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Add response headers
            add_header X-Service "rf-detr" always;
            add_header X-Container "nuro-padel-rf-detr" always;
        }

        # RF-DETR health check
        location /rf-detr/healthz {
            proxy_pass http://rf_detr/healthz;
            proxy_set_header Host $host;
            add_header X-Service "rf-detr" always;
        }

        # === ViTPose++ Service Routes ===
        location /vitpose/ {
            proxy_pass http://vitpose/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Add response headers
            add_header X-Service "vitpose" always;
            add_header X-Container "nuro-padel-vitpose" always;
        }

        # ViTPose++ health check
        location /vitpose/healthz {
            proxy_pass http://vitpose/healthz;
            proxy_set_header Host $host;
            add_header X-Service "vitpose" always;
        }

        # === Global Health Checks ===
        location /healthz {
            access_log off;
            return 200 '{"status":"healthy","services":["yolo-combined","mmpose","yolo-nas","rf-detr","vitpose"],"timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }

        # === Default Route - Service Discovery ===
        location / {
            return 200 '{
                "nuro_padel_api": "v1.0",
                "services": {
                    "yolo_combined": {
                        "endpoints": ["/yolo11/pose", "/yolo11/object", "/yolov8/pose", "/yolov8/object"],
                        "health": "/yolo-combined/healthz"
                    },
                    "mmpose": {
                        "endpoints": ["/mmpose/pose"],
                        "health": "/mmpose/healthz"
                    },
                    "yolo_nas": {
                        "endpoints": ["/yolo-nas/pose", "/yolo-nas/object"],
                        "health": "/yolo-nas/healthz"
                    },
                    "rf_detr": {
                        "endpoints": ["/rf-detr/analyze"],
                        "health": "/rf-detr/healthz",
                        "description": "RF-DETR object detection with FP16 optimization"
                    },
                    "vitpose": {
                        "endpoints": ["/vitpose/analyze"],
                        "health": "/vitpose/healthz",
                        "description": "ViTPose++ advanced pose estimation"
                    }
                },
                "global_health": "/healthz"
            }';
            add_header Content-Type application/json;
        }

        # Error pages
        error_page 502 503 504 /50x.html;
        location = /50x.html {
            return 502 '{"error":"Service temporarily unavailable","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }
    }
}
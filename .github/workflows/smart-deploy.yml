name: Smart Deployment
on:
  push:
    branches: [ main, develop, master, docker-containers, feature/*, fix/*, hotfix/* ]
  pull_request:
    branches: [ main, master, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_PREFIX: stevetowers098/nuro-padel

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      yolo-combined: ${{ steps.changes.outputs.yolo-combined }}
      mmpose: ${{ steps.changes.outputs.mmpose }}
      yolo-nas: ${{ steps.changes.outputs.yolo-nas }}
      nginx: ${{ steps.changes.outputs.nginx }}
      docker-compose: ${{ steps.changes.outputs.docker-compose }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            yolo-combined:
              - 'yolo-combined-service/**'
              - 'requirements/yolo-nas.txt'
            mmpose:
              - 'mmpose-service/**'
              - 'requirements/mmpose.txt'
            yolo-nas:
              - 'yolo-nas-service/**'
              - 'requirements/yolo-nas.txt'
            nginx:
              - 'nginx.conf'
              - 'nginx.resilient.conf'
            docker-compose:
              - 'docker-compose*.yml'
              - 'Dockerfile*'

  build-yolo-combined:
    needs: detect-changes
    if: needs.detect-changes.outputs.yolo-combined == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/yolo-combined
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push YOLO Combined image
        uses: docker/build-push-action@v5
        with:
          context: ./yolo-combined-service
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-mmpose:
    needs: detect-changes
    if: needs.detect-changes.outputs.mmpose == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/mmpose
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push MMPose image
        uses: docker/build-push-action@v5
        with:
          context: ./mmpose-service
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-yolo-nas:
    needs: detect-changes
    if: needs.detect-changes.outputs.yolo-nas == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/yolo-nas
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push YOLO-NAS image
        uses: docker/build-push-action@v5
        with:
          context: ./yolo-nas-service
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: [detect-changes, build-yolo-combined, build-mmpose, build-yolo-nas]
    if: always() && (needs.build-yolo-combined.result == 'success' || needs.build-yolo-combined.result == 'skipped') && (needs.build-mmpose.result == 'success' || needs.build-mmpose.result == 'skipped') && (needs.build-yolo-nas.result == 'success' || needs.build-yolo-nas.result == 'skipped')
    runs-on: ubuntu-latest
    steps:
      - name: Deployment Summary
        run: |
          echo "üöÄ Smart Deployment Summary"
          echo "YOLO Combined: ${{ needs.detect-changes.outputs.yolo-combined == 'true' && 'Built & Updated' || 'Skipped - No Changes' }}"
          echo "MMPose: ${{ needs.detect-changes.outputs.mmpose == 'true' && 'Built & Updated' || 'Skipped - No Changes' }}"
          echo "YOLO-NAS: ${{ needs.detect-changes.outputs.yolo-nas == 'true' && 'Built & Updated' || 'Skipped - No Changes' }}"
          echo "Nginx: ${{ needs.detect-changes.outputs.nginx == 'true' && 'Configuration Updated' || 'No Changes' }}"
          echo "Docker Compose: ${{ needs.detect-changes.outputs.docker-compose == 'true' && 'Configuration Updated' || 'No Changes' }}"
          
          # Calculate time saved
          total_services=3
          changed_services=$(( ${{ needs.detect-changes.outputs.yolo-combined == 'true' && 1 || 0 }} + ${{ needs.detect-changes.outputs.mmpose == 'true' && 1 || 0 }} + ${{ needs.detect-changes.outputs.yolo-nas == 'true' && 1 || 0 }} ))
          skipped_services=$((total_services - changed_services))
          time_saved=$((skipped_services * 10))  # Assume 10 minutes per service
          
          echo "‚è±Ô∏è  Services rebuilt: $changed_services/$total_services"
          echo "‚ö° Estimated time saved: ${time_saved} minutes"